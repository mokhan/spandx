---
http_interactions:
- request:
    method: get
    uri: https://pypi.org/pypi/six/1.13.0/json
    headers:
      Host:
      - pypi.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json
    body:
      encoding: ASCII-8BIT
      string: '{"info":{"author":"Benjamin Peterson","author_email":"benjamin@python.org","bugtrack_url":null,"classifiers":["Development
        Status :: 5 - Production/Stable","Intended Audience :: Developers","License
        :: OSI Approved :: MIT License","Programming Language :: Python :: 2","Programming
        Language :: Python :: 3","Topic :: Software Development :: Libraries","Topic
        :: Utilities"],"description":".. image:: https://img.shields.io/pypi/v/six.svg\n   :target:
        https://pypi.org/project/six/\n   :alt: six on PyPI\n\n.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master\n   :target:
        https://travis-ci.org/benjaminp/six\n   :alt: six on TravisCI\n\n.. image::
        https://readthedocs.org/projects/six/badge/?version=latest\n   :target: https://six.readthedocs.io/\n   :alt:
        six''s documentation on Read the Docs\n\n.. image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target:
        https://github.com/benjaminp/six/blob/master/LICENSE\n   :alt: MIT License
        badge\n\nSix is a Python 2 and 3 compatibility library.  It provides utility
        functions\nfor smoothing over the differences between the Python versions
        with the goal of\nwriting Python code that is compatible on both Python versions.  See
        the\ndocumentation for more information on what is provided.\n\nSix supports
        every Python version since 2.6.  It is contained in only one Python\nfile,
        so it can be easily copied into your project. (The copyright and license\nnotice
        must be retained.)\n\nOnline documentation is at https://six.readthedocs.io/.\n\nBugs
        can be reported to https://github.com/benjaminp/six.  The code can also\nbe
        found there.\n\nFor questions about six or porting in general, email the python-porting
        mailing\nlist: https://mail.python.org/mailman/listinfo/python-porting\n\n\n","description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"home_page":"https://github.com/benjaminp/six","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"six","package_url":"https://pypi.org/project/six/","platform":"","project_url":"https://pypi.org/project/six/","project_urls":{"Homepage":"https://github.com/benjaminp/six"},"release_url":"https://pypi.org/project/six/1.13.0/","requires_dist":null,"requires_python":">=2.6,
        !=3.0.*, !=3.1.*","summary":"Python 2 and 3 compatibility utilities","version":"1.13.0"},"last_serial":6460514,"releases":{"0.9.0":[{"comment_text":"","digests":{"md5":"5ce2947347101b9f54674c19ef88233d","sha256":"14fd1ed3dd0e1a46cc53b8fc890b5a3b11737515aeb7f42c3af9f38e8d8975d7"},"downloads":-1,"filename":"six-0.9.0.tar.gz","has_sig":true,"md5_digest":"5ce2947347101b9f54674c19ef88233d","packagetype":"sdist","python_version":"source","requires_python":null,"size":13292,"upload_time":"2010-06-29T19:56:36","upload_time_iso_8601":"2010-06-29T19:56:36.719942Z","url":"https://files.pythonhosted.org/packages/0e/f9/66471f9b7e9291cca697b2e61a10645a537f389a9d5c0679d50dd86b20f7/six-0.9.0.tar.gz"}],"0.9.1":[{"comment_text":"","digests":{"md5":"1b249e0011355722f569406135a8ac93","sha256":"23a656e7db613f75d061570e3b2cf57d2a498501018593e6a01e24ed211a78dc"},"downloads":-1,"filename":"six-0.9.1.tar.gz","has_sig":false,"md5_digest":"1b249e0011355722f569406135a8ac93","packagetype":"sdist","python_version":"source","requires_python":null,"size":13653,"upload_time":"2010-06-30T22:32:11","upload_time_iso_8601":"2010-06-30T22:32:11.719338Z","url":"https://files.pythonhosted.org/packages/4e/02/f08545a99829a04e841b6443267f216629c723c23fb9cfd17c99c068e33a/six-0.9.1.tar.gz"}],"0.9.2":[{"comment_text":"","digests":{"md5":"92ea7c870396dd9222029a188c6bbd7f","sha256":"2a00a4b85b6a913f688e2dfd8febcef79926524ad10ac25cce25aca25a8a416d"},"downloads":-1,"filename":"six-0.9.2.tar.gz","has_sig":false,"md5_digest":"92ea7c870396dd9222029a188c6bbd7f","packagetype":"sdist","python_version":"source","requires_python":null,"size":13658,"upload_time":"2010-07-05T00:42:38","upload_time_iso_8601":"2010-07-05T00:42:38.202918Z","url":"https://files.pythonhosted.org/packages/af/33/fa2097ac4bc7a9672517fdcb982bc7454fdd113f49f7ab353025b906a119/six-0.9.2.tar.gz"}],"1.0.0":[{"comment_text":"","digests":{"md5":"37c7ff036fdff2b1bb8d55e49ccb3b44","sha256":"ca79c14c8cb5e58912d185f0e07ca9c687e232b7c68c4b73bf1c83ef5979333e"},"downloads":-1,"filename":"six-1.0.0.tar.gz","has_sig":false,"md5_digest":"37c7ff036fdff2b1bb8d55e49ccb3b44","packagetype":"sdist","python_version":"source","requires_python":null,"size":11694,"upload_time":"2011-03-15T16:55:50","upload_time_iso_8601":"2011-03-15T16:55:50.861613Z","url":"https://files.pythonhosted.org/packages/a6/af/4506a069312018665b8936e5d51b3aa013971ef65eab5231ef151a482dcd/six-1.0.0.tar.gz"}],"1.0b1":[{"comment_text":"","digests":{"md5":"cbfcc64af1f27162a6a6b5510e262c9d","sha256":"3ef868e4818fc3c7f1cf6827a20766d7596fc0d4ab50a74747538262ebf402d4"},"downloads":-1,"filename":"six-1.0b1.tar.gz","has_sig":false,"md5_digest":"cbfcc64af1f27162a6a6b5510e262c9d","packagetype":"sdist","python_version":"source","requires_python":null,"size":11251,"upload_time":"2010-11-20T22:57:30","upload_time_iso_8601":"2010-11-20T22:57:30.511044Z","url":"https://files.pythonhosted.org/packages/8b/08/8f569ab2c81c1443ce43e29df2e7eec1ab7f005455f6c193793728b00f04/six-1.0b1.tar.gz"}],"1.1.0":[{"comment_text":"","digests":{"md5":"9e8099b57cd27493a6988e9c9b313e23","sha256":"8c421a58100704148fd9ad2e38b05d5646f6d3139ac209dfda4c980d124c75ba"},"downloads":-1,"filename":"six-1.1.0.tar.gz","has_sig":false,"md5_digest":"9e8099b57cd27493a6988e9c9b313e23","packagetype":"sdist","python_version":"source","requires_python":null,"size":12573,"upload_time":"2011-11-23T06:43:24","upload_time_iso_8601":"2011-11-23T06:43:24.293073Z","url":"https://files.pythonhosted.org/packages/54/d4/8f7d631f1c3defa2ff4bd7c3daddcc5ed6eb9df7631f3cf24cc376aa3231/six-1.1.0.tar.gz"}],"1.10.0":[{"comment_text":"","digests":{"md5":"3ab558cf5d4f7a72611d59a81a315dc8","sha256":"0ff78c403d9bccf5a425a6d31a12aa6b47f1c21ca4dc2573a7e2f32a97335eb1"},"downloads":-1,"filename":"six-1.10.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"3ab558cf5d4f7a72611d59a81a315dc8","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":10341,"upload_time":"2015-10-07T03:17:20","upload_time_iso_8601":"2015-10-07T03:17:20.304588Z","url":"https://files.pythonhosted.org/packages/c8/0a/b6723e1bc4c516cb687841499455a8505b44607ab535be01091c0f24f079/six-1.10.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"34eed507548117b2ab523ab14b2f8b55","sha256":"105f8d68616f8248e24bf0e9372ef04d3cc10104f1980f54d57b2ce73a5ad56a"},"downloads":-1,"filename":"six-1.10.0.tar.gz","has_sig":false,"md5_digest":"34eed507548117b2ab523ab14b2f8b55","packagetype":"sdist","python_version":"source","requires_python":null,"size":29630,"upload_time":"2015-10-07T03:17:49","upload_time_iso_8601":"2015-10-07T03:17:49.113108Z","url":"https://files.pythonhosted.org/packages/b3/b2/238e2590826bfdd113244a40d9d3eb26918bd798fc187e2360a8367068db/six-1.10.0.tar.gz"}],"1.11.0":[{"comment_text":"","digests":{"md5":"866ab722be6bdfed6830f3179af65468","sha256":"832dc0e10feb1aa2c68dcc57dbb658f1c7e65b9b61af69048abc87a2db00a0eb"},"downloads":-1,"filename":"six-1.11.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"866ab722be6bdfed6830f3179af65468","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":10702,"upload_time":"2017-09-17T18:46:53","upload_time_iso_8601":"2017-09-17T18:46:53.702194Z","url":"https://files.pythonhosted.org/packages/67/4b/141a581104b1f6397bfa78ac9d43d8ad29a7ca43ea90a2d863fe3056e86a/six-1.11.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"d12789f9baf7e9fb2524c0c64f1773f8","sha256":"70e8a77beed4562e7f14fe23a786b54f6296e34344c23bc42f07b15018ff98e9"},"downloads":-1,"filename":"six-1.11.0.tar.gz","has_sig":false,"md5_digest":"d12789f9baf7e9fb2524c0c64f1773f8","packagetype":"sdist","python_version":"source","requires_python":null,"size":29860,"upload_time":"2017-09-17T18:46:54","upload_time_iso_8601":"2017-09-17T18:46:54.492027Z","url":"https://files.pythonhosted.org/packages/16/d8/bc6316cf98419719bd59c91742194c111b6f2e85abac88e496adefaf7afe/six-1.11.0.tar.gz"}],"1.12.0":[{"comment_text":"","digests":{"md5":"b0dc15d494e2d6e6c19cbbe482e91c5d","sha256":"3350809f0555b11f552448330d0b52d5f24c91a322ea4a15ef22629740f3761c"},"downloads":-1,"filename":"six-1.12.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"b0dc15d494e2d6e6c19cbbe482e91c5d","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.6,
        !=3.0.*, !=3.1.*","size":10586,"upload_time":"2018-12-10T00:59:57","upload_time_iso_8601":"2018-12-10T00:59:57.273383Z","url":"https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"9ae5d1feed8c0215f4ae4adcd9207fcb","sha256":"d16a0141ec1a18405cd4ce8b4613101da75da0e9a7aec5bdd4fa804d0e0eba73"},"downloads":-1,"filename":"six-1.12.0.tar.gz","has_sig":false,"md5_digest":"9ae5d1feed8c0215f4ae4adcd9207fcb","packagetype":"sdist","python_version":"source","requires_python":">=2.6,
        !=3.0.*, !=3.1.*","size":32725,"upload_time":"2018-12-10T00:59:58","upload_time_iso_8601":"2018-12-10T00:59:58.966855Z","url":"https://files.pythonhosted.org/packages/dd/bf/4138e7bfb757de47d1f4b6994648ec67a51efe58fa907c1e11e350cddfca/six-1.12.0.tar.gz"}],"1.13.0":[{"comment_text":"","digests":{"md5":"b642ef493974a23bb77f5c7e0e08b204","sha256":"1f1b7d42e254082a9db6279deae68afb421ceba6158efa6131de7b3003ee93fd"},"downloads":-1,"filename":"six-1.13.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"b642ef493974a23bb77f5c7e0e08b204","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.6,
        !=3.0.*, !=3.1.*","size":10747,"upload_time":"2019-11-05T17:28:34","upload_time_iso_8601":"2019-11-05T17:28:34.350776Z","url":"https://files.pythonhosted.org/packages/65/26/32b8464df2a97e6dd1b656ed26b2c194606c16fe163c695a992b36c11cdf/six-1.13.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"e92c23c882c7d5564ce5773fe31b2771","sha256":"30f610279e8b2578cab6db20741130331735c781b56053c59c4076da27f06b66"},"downloads":-1,"filename":"six-1.13.0.tar.gz","has_sig":false,"md5_digest":"e92c23c882c7d5564ce5773fe31b2771","packagetype":"sdist","python_version":"source","requires_python":">=2.6,
        !=3.0.*, !=3.1.*","size":33726,"upload_time":"2019-11-05T17:28:36","upload_time_iso_8601":"2019-11-05T17:28:36.181524Z","url":"https://files.pythonhosted.org/packages/94/3e/edcf6fef41d89187df7e38e868b2dd2182677922b600e880baad7749c865/six-1.13.0.tar.gz"}],"1.14.0":[{"comment_text":"","digests":{"md5":"eb7d3da1d4e6554cf48ff3e69cf49b0d","sha256":"8f3cd2e254d8f793e7f3d6d9df77b92252b52637291d0f0da013c76ea2724b6c"},"downloads":-1,"filename":"six-1.14.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"eb7d3da1d4e6554cf48ff3e69cf49b0d","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.7,
        !=3.0.*, !=3.1.*, !=3.2.*","size":10938,"upload_time":"2020-01-15T18:10:19","upload_time_iso_8601":"2020-01-15T18:10:19.607402Z","url":"https://files.pythonhosted.org/packages/65/eb/1f97cb97bfc2390a276969c6fae16075da282f5058082d4cb10c6c5c1dba/six-1.14.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"21674588a57e649d1a6d977ec3122140","sha256":"236bdbdce46e6e6a3d61a337c0f8b763ca1e8717c03b369e87a7ec7ce1319c0a"},"downloads":-1,"filename":"six-1.14.0.tar.gz","has_sig":false,"md5_digest":"21674588a57e649d1a6d977ec3122140","packagetype":"sdist","python_version":"source","requires_python":">=2.7,
        !=3.0.*, !=3.1.*, !=3.2.*","size":33857,"upload_time":"2020-01-15T18:10:20","upload_time_iso_8601":"2020-01-15T18:10:20.716794Z","url":"https://files.pythonhosted.org/packages/21/9f/b251f7f8a76dec1d6651be194dfba8fb8d7781d10ab3987190de8391d08e/six-1.14.0.tar.gz"}],"1.2.0":[{"comment_text":"","digests":{"md5":"2a5d1afc79912832ac78fd38e3d75d7e","sha256":"4a86d87623f75811524f30832e092914d65af7ff2eb1d403e01ec235b0e19cb3"},"downloads":-1,"filename":"six-1.2.0.tar.gz","has_sig":false,"md5_digest":"2a5d1afc79912832ac78fd38e3d75d7e","packagetype":"sdist","python_version":"source","requires_python":null,"size":15316,"upload_time":"2012-08-28T19:55:23","upload_time_iso_8601":"2012-08-28T19:55:23.042633Z","url":"https://files.pythonhosted.org/packages/e9/b4/0ccbc17cd49a812ab8363058bb12f0134cf2d3ba752391f309ddf567ae97/six-1.2.0.tar.gz"}],"1.3.0":[{"comment_text":"","digests":{"md5":"ec47fe6070a8a64c802363d2c2b1e2ee","sha256":"d59793f9b255bd00de800b97f9a50cce4fc8a44c205f7defa5bb7d691d13b852"},"downloads":-1,"filename":"six-1.3.0.tar.gz","has_sig":false,"md5_digest":"ec47fe6070a8a64c802363d2c2b1e2ee","packagetype":"sdist","python_version":"source","requires_python":null,"size":17701,"upload_time":"2013-03-18T20:40:13","upload_time_iso_8601":"2013-03-18T20:40:13.050535Z","url":"https://files.pythonhosted.org/packages/02/f8/d16f06e49b0d2ef40548bf42826f926c8964ad3b1d00f8098dcc6ef15aea/six-1.3.0.tar.gz"}],"1.4.0":[{"comment_text":"","digests":{"md5":"5fcab6a067b5ebf68ede2f4d02fe7547","sha256":"2936d126f28ce59746c1a0a065580cd26d4a39127229124a4b4f9b076ebaaff9"},"downloads":-1,"filename":"six-1.4.0.tar.gz","has_sig":false,"md5_digest":"5fcab6a067b5ebf68ede2f4d02fe7547","packagetype":"sdist","python_version":"source","requires_python":null,"size":21367,"upload_time":"2013-09-01T21:14:06","upload_time_iso_8601":"2013-09-01T21:14:06.059853Z","url":"https://files.pythonhosted.org/packages/99/25/2df8760d6902620cfca85e36f07de491d14f2c325ecc01c1a5590d8af22d/six-1.4.0.tar.gz"}],"1.4.1":[{"comment_text":"","digests":{"md5":"bdbb9e12d3336c198695aa4cf3a61d62","sha256":"f045afd6dffb755cc0411acb7ce9acc4de0e71261d4b5f91de2e68d9aa5f8367"},"downloads":-1,"filename":"six-1.4.1.tar.gz","has_sig":false,"md5_digest":"bdbb9e12d3336c198695aa4cf3a61d62","packagetype":"sdist","python_version":"source","requires_python":null,"size":21409,"upload_time":"2013-09-02T13:12:05","upload_time_iso_8601":"2013-09-02T13:12:05.878505Z","url":"https://files.pythonhosted.org/packages/4e/aa/73683ca0c4237891e33562e3f55bcaab972869959b97b397637519d92035/six-1.4.1.tar.gz"}],"1.5.0":[{"comment_text":"","digests":{"md5":"3307efe2bc4ca8556befc9afe297c530","sha256":"7ba77770fedd5b84d6c67283912cad39856b5532dc1beb76182ccacee9ec41e0"},"downloads":-1,"filename":"six-1.5.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"3307efe2bc4ca8556befc9afe297c530","packagetype":"bdist_wheel","python_version":"3.3","requires_python":null,"size":8186,"upload_time":"2014-01-05T00:56:10","upload_time_iso_8601":"2014-01-05T00:56:10.191621Z","url":"https://files.pythonhosted.org/packages/ca/15/e62a66024dded9640f8d39112330e6b108e7ab21a1b8618c2d1e2eea7e1d/six-1.5.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"72b33ff89f3b2f21dd2cb28fb94f7031","sha256":"9fa05de9aa4e0042767dd666ce4905a097306b6291148e958162c4ca0b52d16d"},"downloads":-1,"filename":"six-1.5.0.tar.gz","has_sig":false,"md5_digest":"72b33ff89f3b2f21dd2cb28fb94f7031","packagetype":"sdist","python_version":"source","requires_python":null,"size":23775,"upload_time":"2014-01-05T00:56:07","upload_time_iso_8601":"2014-01-05T00:56:07.334961Z","url":"https://files.pythonhosted.org/packages/0f/dd/379fa572b72da0b482545116139529af8da92e686ea136271beecddd4e81/six-1.5.0.tar.gz"}],"1.5.1":[{"comment_text":"","digests":{"md5":"2064b715201fa76a55dea75675ee19f2","sha256":"a5f2b285f03dd620ea16d22d0986d82d16340ef684445c7ba9ce8a7c1d76046e"},"downloads":-1,"filename":"six-1.5.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2064b715201fa76a55dea75675ee19f2","packagetype":"bdist_wheel","python_version":"3.3","requires_python":null,"size":8396,"upload_time":"2014-01-05T05:15:22","upload_time_iso_8601":"2014-01-05T05:15:22.028490Z","url":"https://files.pythonhosted.org/packages/60/84/72c628d5a4efffb23e2fb46cdbf8ee669046d8208ba5dab08f989b7bfe9c/six-1.5.1-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"bb00c982fc0ec0dd6a760500b0941fa9","sha256":"485e543ba816b631f15b3b217f5cc190da1ea2cb4a8c66dbacdc030aef0ba380"},"downloads":-1,"filename":"six-1.5.1.tar.gz","has_sig":false,"md5_digest":"bb00c982fc0ec0dd6a760500b0941fa9","packagetype":"sdist","python_version":"source","requires_python":null,"size":24000,"upload_time":"2014-01-05T05:15:14","upload_time_iso_8601":"2014-01-05T05:15:14.667358Z","url":"https://files.pythonhosted.org/packages/0b/5e/4b3f417a85d9cd30b172a1512a2d3cdd0ffb05a5deacb8adf2ef30db100d/six-1.5.1.tar.gz"}],"1.5.2":[{"comment_text":"","digests":{"md5":"ba32222ad0c5c7057a7c42e66e81289d","sha256":"01f1bfe26d8b2c2c19b6c6bd1974746667038c7b45601ee510b7b3867fd14b7e"},"downloads":-1,"filename":"six-1.5.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"ba32222ad0c5c7057a7c42e66e81289d","packagetype":"bdist_wheel","python_version":"3.3","requires_python":null,"size":8429,"upload_time":"2014-01-06T15:57:56","upload_time_iso_8601":"2014-01-06T15:57:56.748401Z","url":"https://files.pythonhosted.org/packages/c7/a4/35520d20a8e4b3c28c9db705fffd4c7053e0236928951da32167e5078faa/six-1.5.2-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"322b86d0c50a7d165c05600154cecc0a","sha256":"fc6beeffdd8fc76b783287eb77d093425d0710920aae2c70acd693c52d7e8cf8"},"downloads":-1,"filename":"six-1.5.2.tar.gz","has_sig":false,"md5_digest":"322b86d0c50a7d165c05600154cecc0a","packagetype":"sdist","python_version":"source","requires_python":null,"size":24081,"upload_time":"2014-01-06T15:57:54","upload_time_iso_8601":"2014-01-06T15:57:54.056410Z","url":"https://files.pythonhosted.org/packages/1d/8e/220ce5a36dac3aabccee871a34561ceba82ce14b53760143cf5e01bb4d2c/six-1.5.2.tar.gz"}],"1.6.0":[{"comment_text":"","digests":{"md5":"e2755cf8a1d8e4eda44a8e3436c458ca","sha256":"511372cb98f84471fcaa0fb2ebdd7e359ebc0c6cfee7b1d8cb38853607f9b25a"},"downloads":-1,"filename":"six-1.6.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e2755cf8a1d8e4eda44a8e3436c458ca","packagetype":"bdist_wheel","python_version":"3.3","requires_python":null,"size":8513,"upload_time":"2014-03-14T03:11:13","upload_time_iso_8601":"2014-03-14T03:11:13.800006Z","url":"https://files.pythonhosted.org/packages/54/45/8b5eef1ba0b79acbdab01435359f37ae13dc6c4aafaa444b805e3867386d/six-1.6.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"eb22a24e8be9497dd71930bf2321b6ec","sha256":"8741b7f4e25ea45da739d0ffcff086293d3c8b406dc2941342b9368aac56638a"},"downloads":-1,"filename":"six-1.6.0.tar.gz","has_sig":false,"md5_digest":"eb22a24e8be9497dd71930bf2321b6ec","packagetype":"sdist","python_version":"source","requires_python":null,"size":24716,"upload_time":"2014-03-14T03:11:10","upload_time_iso_8601":"2014-03-14T03:11:10.680272Z","url":"https://files.pythonhosted.org/packages/02/c3/8e2a38edaac777ee2bbe479b3a65b020ade549efd6a224c2f4e95c818799/six-1.6.0.tar.gz"}],"1.6.1":[{"comment_text":"","digests":{"md5":"ca195cc2271b03ae1c8750a88081c7f1","sha256":"8f34f5b89e17fa8a6e3945310318cbd5c8cbb16fa288f78ea96dbc70344cb1bf"},"downloads":-1,"filename":"six-1.6.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"ca195cc2271b03ae1c8750a88081c7f1","packagetype":"bdist_wheel","python_version":"3.3","requires_python":null,"size":8557,"upload_time":"2014-03-14T03:39:37","upload_time_iso_8601":"2014-03-14T03:39:37.478620Z","url":"https://files.pythonhosted.org/packages/ba/19/aa48edcff9d0c396a4d009d362d0a0a1ac3db6f9d7d5736e0175b94d7ef8/six-1.6.1-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"07d606ac08595d795bf926cc9985674f","sha256":"d4392a7c8d91b005c002568a85faf617c67241c8cd8399cc395e8f1005aff80d"},"downloads":-1,"filename":"six-1.6.1.tar.gz","has_sig":false,"md5_digest":"07d606ac08595d795bf926cc9985674f","packagetype":"sdist","python_version":"source","requires_python":null,"size":24792,"upload_time":"2014-03-14T03:39:35","upload_time_iso_8601":"2014-03-14T03:39:35.307201Z","url":"https://files.pythonhosted.org/packages/e8/70/b9c441d8c02b70eb3bf923c49944b8fc656f78a43c084d2a98534d7404e2/six-1.6.1.tar.gz"}],"1.7.0":[{"comment_text":"","digests":{"md5":"e5ca7e89cc79d755ea128fc7e2cb136e","sha256":"1fb268a43932782f6ca51f1ee922c22b13b47f54f6919e9331db4972b6699490"},"downloads":-1,"filename":"six-1.7.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e5ca7e89cc79d755ea128fc7e2cb136e","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":9340,"upload_time":"2014-06-08T02:35:46","upload_time_iso_8601":"2014-06-08T02:35:46.721736Z","url":"https://files.pythonhosted.org/packages/20/0a/617bf23511160454995bf1cbe6789f22beeb8b49c1f3b1bbf4b5cd6a55ca/six-1.7.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"92f7210da3db1e988979fa394aa41d7a","sha256":"836335d85210d5dd0f33716b15cc8103bb4f5ec34e2a8809d43bd26d4b6083a1"},"downloads":-1,"filename":"six-1.7.0.tar.gz","has_sig":false,"md5_digest":"92f7210da3db1e988979fa394aa41d7a","packagetype":"sdist","python_version":"source","requires_python":null,"size":26124,"upload_time":"2014-06-08T02:35:49","upload_time_iso_8601":"2014-06-08T02:35:49.490257Z","url":"https://files.pythonhosted.org/packages/7e/16/792311d76b8e23da84e1b177fb973679de1c963391d0dcd7e963634bed4b/six-1.7.0.tar.gz"}],"1.7.1":[{"comment_text":"","digests":{"md5":"c3c1e251733acc9db947e75c9a02cf06","sha256":"b01d8b5e340f30c89ec1e129292c90853abb449877698bb09b4aa2ebca2730a3"},"downloads":-1,"filename":"six-1.7.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"c3c1e251733acc9db947e75c9a02cf06","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":9610,"upload_time":"2014-06-09T03:57:48","upload_time_iso_8601":"2014-06-09T03:57:48.625452Z","url":"https://files.pythonhosted.org/packages/aa/ec/e6954e19e617c1b9860325f0995d456d8416c84a6cb9bce1c10998280b59/six-1.7.1-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"f9fbad970c6e855cabde7ec1144b9058","sha256":"c9bf95b1204a9965d94b5c8c486cc92e84b33a339dc1ebc846e2ad8761656986"},"downloads":-1,"filename":"six-1.7.1.tar.gz","has_sig":false,"md5_digest":"f9fbad970c6e855cabde7ec1144b9058","packagetype":"sdist","python_version":"source","requires_python":null,"size":26375,"upload_time":"2014-06-09T03:57:54","upload_time_iso_8601":"2014-06-09T03:57:54.533230Z","url":"https://files.pythonhosted.org/packages/1b/2a/ad686ae156581a70a7be28e7762f7d956bec30d62dafe9295b78dc019692/six-1.7.1.tar.gz"}],"1.7.2":[{"comment_text":"","digests":{"md5":"0e10f8d8e65257408e4428632859dad9","sha256":"d51ab8b2b0402b3c93f5cfff3906e6d4c957a90e9af640a7ce8cf7da85115111"},"downloads":-1,"filename":"six-1.7.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"0e10f8d8e65257408e4428632859dad9","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":9614,"upload_time":"2014-06-09T04:15:38","upload_time_iso_8601":"2014-06-09T04:15:38.547204Z","url":"https://files.pythonhosted.org/packages/6b/30/839b8059d1225dbd3a0dd97c3c370bbb978cde505e160b30515fb7be17d8/six-1.7.2-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"4c26276583b01dfc73474cb32327af91","sha256":"c7b85e433ecf2f2df37edb017b954c468342991e1883c8a1e8d8616584b69998"},"downloads":-1,"filename":"six-1.7.2.tar.gz","has_sig":false,"md5_digest":"4c26276583b01dfc73474cb32327af91","packagetype":"sdist","python_version":"source","requires_python":null,"size":26399,"upload_time":"2014-06-09T04:15:44","upload_time_iso_8601":"2014-06-09T04:15:44.986257Z","url":"https://files.pythonhosted.org/packages/a4/ed/a1410f4a3ae1492d87cbc7acdeea819db3caf6e526ef7032dd6fe50d2083/six-1.7.2.tar.gz"}],"1.7.3":[{"comment_text":"","digests":{"md5":"5f34fe522765d398b21decdce62ebd1d","sha256":"3388fc1a2ca7a5d4261b4d1e3d8b7342cbf4bf1cfb3702311c609321432ced78"},"downloads":-1,"filename":"six-1.7.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"5f34fe522765d398b21decdce62ebd1d","packagetype":"bdist_wheel","python_version":"3.3","requires_python":null,"size":9503,"upload_time":"2014-06-29T19:30:30","upload_time_iso_8601":"2014-06-29T19:30:30.577750Z","url":"https://files.pythonhosted.org/packages/2e/a4/6dcb84af409b7bc0c258a0d6bd7e14231724d9a46b750c048f09d74d870c/six-1.7.3-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"784c6e5541c3c4952de9c0a966a0a80b","sha256":"7a842c9f882c0b2ab1064d567bb9fff6a21c9efbc3d9992083ad6193787ed393"},"downloads":-1,"filename":"six-1.7.3.tar.gz","has_sig":false,"md5_digest":"784c6e5541c3c4952de9c0a966a0a80b","packagetype":"sdist","python_version":"source","requires_python":null,"size":26339,"upload_time":"2014-06-29T19:30:27","upload_time_iso_8601":"2014-06-29T19:30:27.815992Z","url":"https://files.pythonhosted.org/packages/2b/4a/233721f6c6afeed5a2034f617f120fa646da935039f08e67ab8dc008a3e6/six-1.7.3.tar.gz"}],"1.8.0":[{"comment_text":"","digests":{"md5":"2f5f96148c68f3c1611f489678a8b445","sha256":"facfe0c7cceafd49e8f7e472111294566605fdfddc23011da06cc3a4601c9f7d"},"downloads":-1,"filename":"six-1.8.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2f5f96148c68f3c1611f489678a8b445","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":9697,"upload_time":"2014-09-11T21:48:44","upload_time_iso_8601":"2014-09-11T21:48:44.576059Z","url":"https://files.pythonhosted.org/packages/a2/4b/2b4532b4eba116a02fc0b5e0b3540a073a61c003b7b6293b7b884afa8ff1/six-1.8.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"1626eb24cc889110c38f7e786ec69885","sha256":"047bbbba41bac37c444c75ddfdf0573dd6e2f1fbd824e6247bb26fa7d8fa3830"},"downloads":-1,"filename":"six-1.8.0.tar.gz","has_sig":false,"md5_digest":"1626eb24cc889110c38f7e786ec69885","packagetype":"sdist","python_version":"source","requires_python":null,"size":26925,"upload_time":"2014-09-11T21:48:46","upload_time_iso_8601":"2014-09-11T21:48:46.193250Z","url":"https://files.pythonhosted.org/packages/11/3f/2b3c217c5427cdd12619024b1ee1b04d49e27fde5c29df2a0b92c26677c2/six-1.8.0.tar.gz"}],"1.9.0":[{"comment_text":"","digests":{"md5":"9ac7e129a80f72d6fc1f0216f6e9627b","sha256":"418a93c397a7edab23e5588dbc067ac74a723edb3d541bd4936f79476e7645da"},"downloads":-1,"filename":"six-1.9.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"9ac7e129a80f72d6fc1f0216f6e9627b","packagetype":"bdist_wheel","python_version":"3.3","requires_python":null,"size":10222,"upload_time":"2015-01-02T16:38:13","upload_time_iso_8601":"2015-01-02T16:38:13.948809Z","url":"https://files.pythonhosted.org/packages/10/e3/a7f8eea80a9fa8358c1cd89ef489bc03675e69e54ed2982cd6f2a28d8295/six-1.9.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"476881ef4012262dfc8adc645ee786c4","sha256":"e24052411fc4fbd1f672635537c3fc2330d9481b18c0317695b46259512c91d5"},"downloads":-1,"filename":"six-1.9.0.tar.gz","has_sig":false,"md5_digest":"476881ef4012262dfc8adc645ee786c4","packagetype":"sdist","python_version":"source","requires_python":null,"size":29127,"upload_time":"2015-01-02T16:38:06","upload_time_iso_8601":"2015-01-02T16:38:06.621099Z","url":"https://files.pythonhosted.org/packages/16/64/1dc5e5976b17466fd7d712e59cbe9fb1e18bec153109e5ba3ed6c9102f1a/six-1.9.0.tar.gz"}]},"urls":[{"comment_text":"","digests":{"md5":"b642ef493974a23bb77f5c7e0e08b204","sha256":"1f1b7d42e254082a9db6279deae68afb421ceba6158efa6131de7b3003ee93fd"},"downloads":-1,"filename":"six-1.13.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"b642ef493974a23bb77f5c7e0e08b204","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.6,
        !=3.0.*, !=3.1.*","size":10747,"upload_time":"2019-11-05T17:28:34","upload_time_iso_8601":"2019-11-05T17:28:34.350776Z","url":"https://files.pythonhosted.org/packages/65/26/32b8464df2a97e6dd1b656ed26b2c194606c16fe163c695a992b36c11cdf/six-1.13.0-py2.py3-none-any.whl"},{"comment_text":"","digests":{"md5":"e92c23c882c7d5564ce5773fe31b2771","sha256":"30f610279e8b2578cab6db20741130331735c781b56053c59c4076da27f06b66"},"downloads":-1,"filename":"six-1.13.0.tar.gz","has_sig":false,"md5_digest":"e92c23c882c7d5564ce5773fe31b2771","packagetype":"sdist","python_version":"source","requires_python":">=2.6,
        !=3.0.*, !=3.1.*","size":33726,"upload_time":"2019-11-05T17:28:36","upload_time_iso_8601":"2019-11-05T17:28:36.181524Z","url":"https://files.pythonhosted.org/packages/94/3e/edcf6fef41d89187df7e38e868b2dd2182677922b600e880baad7749c865/six-1.13.0.tar.gz"}]}'
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:20 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/jive/0.1.0/jive.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: |-
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd">
          <metadata>
            <id>jive</id>
            <version>0.1.0</version>
            <authors>mo khan</authors>
            <owners>mo khan</owners>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <license type="expression">MIT</license>
            <licenseUrl>https://licenses.nuget.org/MIT</licenseUrl>
            <description>Add a little jive talk to your csharp.</description>
            <repository url="https://github.com/mokhan/jive.net" />
            <dependencies>
              <group targetFramework=".NETCoreApp3.0" />
            </dependencies>
          </metadata>
        </package>
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:33 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/xunit/2.4.0/xunit.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n
        \ <metadata minClientVersion=\"2.12\">\r\n    <id>xunit</id>\r\n    <version>2.4.0</version>\r\n
        \   <title>xUnit.net</title>\r\n    <authors>James Newkirk,Brad Wilson</authors>\r\n
        \   <owners>James Newkirk,Brad Wilson</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n
        \   <licenseUrl>https://raw.githubusercontent.com/xunit/xunit/master/license.txt</licenseUrl>\r\n
        \   <projectUrl>https://github.com/xunit/xunit</projectUrl>\r\n    <iconUrl>https://raw.githubusercontent.com/xunit/media/master/logo-512-transparent.png</iconUrl>\r\n
        \   <description>xUnit.net is a developer testing framework, built to support
        Test Driven Development, with a design goal of extreme simplicity and alignment
        with framework features.\r\n\r\nInstalling this package installs xunit.core,
        xunit.assert, and xunit.analyzers.</description>\r\n    <summary>xUnit.net
        is a developer testing framework, built to support Test Driven Development.</summary>\r\n
        \   <language>en-US</language>\r\n    <dependencies>\r\n      <dependency
        id=\"xunit.core\" version=\"[2.4.0]\" />\r\n      <dependency id=\"xunit.assert\"
        version=\"[2.4.0]\" />\r\n      <dependency id=\"xunit.analyzers\" version=\"0.10.0\"
        />\r\n    </dependencies>\r\n  </metadata>\r\n</package>"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:33 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/xunit/xunit/master/license.txt
    headers:
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: LICENSE
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:33 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/jive/0.1.0/jive.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    headers:
    body:
      encoding: UTF-8
      string: |-
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd">
          <metadata>
            <id>jive</id>
            <version>0.1.0</version>
            <authors>mo khan</authors>
            <owners>mo khan</owners>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <license type="expression">MIT</license>
            <licenseUrl>https://licenses.nuget.org/MIT</licenseUrl>
            <description>Add a little jive talk to your csharp.</description>
            <repository url="https://github.com/mokhan/jive.net" />
            <dependencies>
              <group targetFramework=".NETCoreApp3.0" />
            </dependencies>
          </metadata>
        </package>
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:34 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/System.Security.Principal.Windows/4.3.0/System.Security.Principal.Windows.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEzLzA1L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGEgbWluQ2xpZW50VmVyc2lvbj0iMi4xMiI+DQogICAgPGlkPlN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuV2luZG93czwvaWQ+DQogICAgPHZlcnNpb24+NC4zLjA8L3ZlcnNpb24+DQogICAgPHRpdGxlPlN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuV2luZG93czwvdGl0bGU+DQogICAgPGF1dGhvcnM+TWljcm9zb2Z0PC9hdXRob3JzPg0KICAgIDxvd25lcnM+bWljcm9zb2Z0LGRvdG5ldGZyYW1ld29yazwvb3duZXJzPg0KICAgIDxyZXF1aXJlTGljZW5zZUFjY2VwdGFuY2U+dHJ1ZTwvcmVxdWlyZUxpY2Vuc2VBY2NlcHRhbmNlPg0KICAgIDxsaWNlbnNlVXJsPmh0dHA6Ly9nby5taWNyb3NvZnQuY29tL2Z3bGluay8/TGlua0lkPTMyOTc3MDwvbGljZW5zZVVybD4NCiAgICA8cHJvamVjdFVybD5odHRwczovL2RvdC5uZXQvPC9wcm9qZWN0VXJsPg0KICAgIDxpY29uVXJsPmh0dHA6Ly9nby5taWNyb3NvZnQuY29tL2Z3bGluay8/TGlua0lEPTI4ODg1OTwvaWNvblVybD4NCiAgICA8ZGVzY3JpcHRpb24+UHJvdmlkZXMgY2xhc3NlcyBmb3IgcmV0cmlldmluZyB0aGUgY3VycmVudCBXaW5kb3dzIHVzZXIgYW5kIGZvciBpbnRlcmFjdGluZyB3aXRoIFdpbmRvd3MgdXNlcnMgYW5kIGdyb3Vwcy4NCg0KQ29tbW9ubHkgVXNlZCBUeXBlczoNClN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0lkZW50aXR5DQpTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcg0KU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5OVEFjY291bnQNClN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuV2luZG93c1ByaW5jaXBhbA0KU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5JZGVudGl0eVJlZmVyZW5jZQ0KU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5JZGVudGl0eU5vdE1hcHBlZEV4Y2VwdGlvbg0KU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzQnVpbHRJblJvbGUNClN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuV2VsbEtub3duU2lkVHlwZQ0KIA0KV2hlbiB1c2luZyBOdUdldCAzLnggdGhpcyBwYWNrYWdlIHJlcXVpcmVzIGF0IGxlYXN0IHZlcnNpb24gMy40LjwvZGVzY3JpcHRpb24+DQogICAgPHJlbGVhc2VOb3Rlcz5odHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9Nzk5NDIxPC9yZWxlYXNlTm90ZXM+DQogICAgPGNvcHlyaWdodD7CqSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uICBBbGwgcmlnaHRzIHJlc2VydmVkLjwvY29weXJpZ2h0Pg0KICAgIDxzZXJ2aWNlYWJsZT50cnVlPC9zZXJ2aWNlYWJsZT4NCiAgICA8ZGVwZW5kZW5jaWVzPg0KICAgICAgPGdyb3VwIHRhcmdldEZyYW1ld29yaz0iLk5FVEZyYW1ld29yazQuNiI+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uU2VjdXJpdHkuQ2xhaW1zIiB2ZXJzaW9uPSI0LjMuMCIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVUU3RhbmRhcmQxLjMiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iTWljcm9zb2Z0Lk5FVENvcmUuUGxhdGZvcm1zIiB2ZXJzaW9uPSIxLjEuMCIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9Ik1pY3Jvc29mdC5XaW4zMi5QcmltaXRpdmVzIiB2ZXJzaW9uPSI0LjMuMCIgZXhjbHVkZT0iQ29tcGlsZSIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9IlN5c3RlbS5Db2xsZWN0aW9ucyIgdmVyc2lvbj0iNC4zLjAiIGV4Y2x1ZGU9IkNvbXBpbGUiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uRGlhZ25vc3RpY3MuRGVidWciIHZlcnNpb249IjQuMy4wIiBleGNsdWRlPSJDb21waWxlIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlJlZmxlY3Rpb24iIHZlcnNpb249IjQuMy4wIiBleGNsdWRlPSJDb21waWxlIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZU1hbmFnZXIiIHZlcnNpb249IjQuMy4wIiBleGNsdWRlPSJDb21waWxlIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlJ1bnRpbWUiIHZlcnNpb249IjQuMy4wIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlJ1bnRpbWUuRXh0ZW5zaW9ucyIgdmVyc2lvbj0iNC4zLjAiIGV4Y2x1ZGU9IkNvbXBpbGUiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uUnVudGltZS5IYW5kbGVzIiB2ZXJzaW9uPSI0LjMuMCIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9IlN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcyIgdmVyc2lvbj0iNC4zLjAiIGV4Y2x1ZGU9IkNvbXBpbGUiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uU2VjdXJpdHkuQ2xhaW1zIiB2ZXJzaW9uPSI0LjMuMCIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9IlN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwiIHZlcnNpb249IjQuMy4wIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlRleHQuRW5jb2RpbmciIHZlcnNpb249IjQuMy4wIiBleGNsdWRlPSJDb21waWxlIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlRocmVhZGluZyIgdmVyc2lvbj0iNC4zLjAiIGV4Y2x1ZGU9IkNvbXBpbGUiIC8+DQogICAgICA8L2dyb3VwPg0KICAgIDwvZGVwZW5kZW5jaWVzPg0KICAgIDxmcmFtZXdvcmtBc3NlbWJsaWVzPg0KICAgICAgPGZyYW1ld29ya0Fzc2VtYmx5IGFzc2VtYmx5TmFtZT0ibXNjb3JsaWIiIHRhcmdldEZyYW1ld29yaz0iLk5FVEZyYW1ld29yazQuNiIgLz4NCiAgICA8L2ZyYW1ld29ya0Fzc2VtYmxpZXM+DQogIDwvbWV0YWRhdGE+DQo8L3BhY2thZ2U+
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:34 GMT
- request:
    method: get
    uri: http://go.microsoft.com/fwlink/?LinkId=329770
    headers:
      Host:
      - go.microsoft.com
  response:
    status:
      code: 302
      message: Moved Temporarily
    headers:
      Location:
      - https://www.microsoft.com/net/dotnet_library_license.htm
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:34 GMT
- request:
    method: get
    uri: https://www.microsoft.com/net/dotnet_library_license.htm
    headers:
      Host:
      - www.microsoft.com
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Location:
      - https://dotnet.microsoft.com/dotnet_library_license.htm
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:34 GMT
- request:
    method: get
    uri: https://dotnet.microsoft.com/dotnet_library_license.htm
    headers:
      Host:
      - dotnet.microsoft.com
  response:
    status:
      code: 302
      message: Found
    headers:
      Location:
      - "/en/dotnet_library_license.htm"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:35 GMT
- request:
    method: get
    uri: https://dotnet.microsoft.com/en/dotnet_library_license.htm
    headers:
      Host:
      - dotnet.microsoft.com
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PGh0bWw+DQoNCjxoZWFkPg0KPG1ldGEgaHR0cC1lcXVpdj1Db250ZW50LVR5cGUgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXdpbmRvd3MtMTI1MiI+DQo8bWV0YSBuYW1lPUdlbmVyYXRvciBjb250ZW50PSJNaWNyb3NvZnQgV29yZCAxNSAoZmlsdGVyZWQpIj4NCjxzdHlsZT4NCjwhLS0NCiAvKiBGb250IERlZmluaXRpb25zICovDQogQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseTpXaW5nZGluZ3M7DQoJcGFub3NlLTE6NSAwIDAgMCAwIDAgMCAwIDAgMDt9DQpAZm9udC1mYWNlDQoJe2ZvbnQtZmFtaWx5OiJNUyBNaW5jaG8iOw0KCXBhbm9zZS0xOjIgMiA2IDkgNCAyIDUgOCAzIDQ7fQ0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseTpTaW1TdW47DQoJcGFub3NlLTE6MiAxIDYgMCAzIDEgMSAxIDEgMTt9DQpAZm9udC1mYWNlDQoJe2ZvbnQtZmFtaWx5OiJDYW1icmlhIE1hdGgiOw0KCXBhbm9zZS0xOjIgNCA1IDMgNSA0IDYgMyAyIDQ7fQ0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseTpDYWxpYnJpOw0KCXBhbm9zZS0xOjIgMTUgNSAyIDIgMiA0IDMgMiA0O30NCkBmb250LWZhY2UNCgl7Zm9udC1mYW1pbHk6VGFob21hOw0KCXBhbm9zZS0xOjIgMTEgNiA0IDMgNSA0IDQgMiA0O30NCkBmb250LWZhY2UNCgl7Zm9udC1mYW1pbHk6IlRyZWJ1Y2hldCBNUyI7DQoJcGFub3NlLTE6MiAxMSA2IDMgMiAyIDIgMiAyIDQ7fQ0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseToiXEBNUyBNaW5jaG8iOw0KCXBhbm9zZS0xOjIgMiA2IDkgNCAyIDUgOCAzIDQ7fQ0KQGZvbnQtZmFjZQ0KCXtmb250LWZhbWlseToiXEBTaW1TdW4iOw0KCXBhbm9zZS0xOjIgMSA2IDAgMyAxIDEgMSAxIDE7fQ0KIC8qIFN0eWxlIERlZmluaXRpb25zICovDQogcC5Nc29Ob3JtYWwsIGxpLk1zb05vcm1hbCwgZGl2Lk1zb05vcm1hbA0KCXttYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDowaW47DQoJZm9udC1zaXplOjkuNXB0Ow0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7fQ0KaDENCgl7bXNvLXN0eWxlLWxpbms6IkhlYWRpbmcgMSBDaGFyIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDoxNy44NXB0Ow0KCXRleHQtaW5kZW50Oi0xNy44NXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCmgyDQoJe21zby1zdHlsZS1saW5rOiJIZWFkaW5nIDIgQ2hhciI7DQoJbWFyZ2luLXRvcDo2LjBwdDsNCgltYXJnaW4tcmlnaHQ6MGluOw0KCW1hcmdpbi1ib3R0b206Ni4wcHQ7DQoJbWFyZ2luLWxlZnQ6LjVpbjsNCgl0ZXh0LWluZGVudDotMTguMTVwdDsNCglmb250LXNpemU6OS41cHQ7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjt9DQpoMw0KCXttc28tc3R5bGUtbGluazoiSGVhZGluZyAzIENoYXIiOw0KCW1hcmdpbi10b3A6Ni4wcHQ7DQoJbWFyZ2luLXJpZ2h0OjBpbjsNCgltYXJnaW4tYm90dG9tOjYuMHB0Ow0KCW1hcmdpbi1sZWZ0OjUzLjg1cHQ7DQoJdGV4dC1pbmRlbnQ6LTE3Ljg1cHQ7DQoJZm9udC1zaXplOjkuNXB0Ow0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQoJZm9udC13ZWlnaHQ6bm9ybWFsO30NCmg0DQoJe21zby1zdHlsZS1saW5rOiJIZWFkaW5nIDQgQ2hhciI7DQoJbWFyZ2luLXRvcDo2LjBwdDsNCgltYXJnaW4tcmlnaHQ6MGluOw0KCW1hcmdpbi1ib3R0b206Ni4wcHQ7DQoJbWFyZ2luLWxlZnQ6NzEuNzVwdDsNCgl0ZXh0LWluZGVudDotMTcuOXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmOw0KCWZvbnQtd2VpZ2h0Om5vcm1hbDt9DQpoNQ0KCXttc28tc3R5bGUtbGluazoiSGVhZGluZyA1IENoYXIiOw0KCW1hcmdpbi10b3A6Ni4wcHQ7DQoJbWFyZ2luLXJpZ2h0OjBpbjsNCgltYXJnaW4tYm90dG9tOjYuMHB0Ow0KCW1hcmdpbi1sZWZ0Ojg5LjZwdDsNCgl0ZXh0LWluZGVudDotMTcuODVwdDsNCglmb250LXNpemU6OS41cHQ7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjsNCglmb250LXdlaWdodDpub3JtYWw7fQ0KaDYNCgl7bXNvLXN0eWxlLWxpbms6IkhlYWRpbmcgNiBDaGFyIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDoxMDcuNDVwdDsNCgl0ZXh0LWluZGVudDotMTcuODVwdDsNCglmb250LXNpemU6OS41cHQ7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjsNCglmb250LXdlaWdodDpub3JtYWw7fQ0KcC5Nc29IZWFkaW5nNywgbGkuTXNvSGVhZGluZzcsIGRpdi5Nc29IZWFkaW5nNw0KCXttc28tc3R5bGUtbGluazoiSGVhZGluZyA3IENoYXIiOw0KCW1hcmdpbi10b3A6Ni4wcHQ7DQoJbWFyZ2luLXJpZ2h0OjBpbjsNCgltYXJnaW4tYm90dG9tOjYuMHB0Ow0KCW1hcmdpbi1sZWZ0OjEyNS4zcHQ7DQoJdGV4dC1pbmRlbnQ6LTE3Ljg1cHQ7DQoJZm9udC1zaXplOjkuNXB0Ow0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7fQ0KcC5Nc29IZWFkaW5nOCwgbGkuTXNvSGVhZGluZzgsIGRpdi5Nc29IZWFkaW5nOA0KCXttc28tc3R5bGUtbGluazoiSGVhZGluZyA4IENoYXIiOw0KCW1hcmdpbi10b3A6Ni4wcHQ7DQoJbWFyZ2luLXJpZ2h0OjBpbjsNCgltYXJnaW4tYm90dG9tOjYuMHB0Ow0KCW1hcmdpbi1sZWZ0OjE0My4xNXB0Ow0KCXRleHQtaW5kZW50Oi0xNy44NXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnAuTXNvSGVhZGluZzksIGxpLk1zb0hlYWRpbmc5LCBkaXYuTXNvSGVhZGluZzkNCgl7bXNvLXN0eWxlLWxpbms6IkhlYWRpbmcgOSBDaGFyIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDoxNjEuMDVwdDsNCgl0ZXh0LWluZGVudDotMTcuOXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnAuTXNvQ29tbWVudFRleHQsIGxpLk1zb0NvbW1lbnRUZXh0LCBkaXYuTXNvQ29tbWVudFRleHQNCgl7bXNvLXN0eWxlLWxpbms6IkNvbW1lbnQgVGV4dCBDaGFyIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDowaW47DQoJZm9udC1zaXplOjEwLjBwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnAuTXNvSGVhZGVyLCBsaS5Nc29IZWFkZXIsIGRpdi5Nc29IZWFkZXINCgl7bXNvLXN0eWxlLWxpbms6IkhlYWRlciBDaGFyIjsNCgltYXJnaW46MGluOw0KCW1hcmdpbi1ib3R0b206LjAwMDFwdDsNCglmb250LXNpemU6OS41cHQ7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjt9DQpwLk1zb0Zvb3RlciwgbGkuTXNvRm9vdGVyLCBkaXYuTXNvRm9vdGVyDQoJe21zby1zdHlsZS1saW5rOiJGb290ZXIgQ2hhciI7DQoJbWFyZ2luOjBpbjsNCgltYXJnaW4tYm90dG9tOi4wMDAxcHQ7DQoJZm9udC1zaXplOjkuNXB0Ow0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7fQ0KYTpsaW5rLCBzcGFuLk1zb0h5cGVybGluaw0KCXtmb250LWZhbWlseToiVGltZXMgTmV3IFJvbWFuIixzZXJpZjsNCgljb2xvcjpibHVlOw0KCXRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7fQ0KYTp2aXNpdGVkLCBzcGFuLk1zb0h5cGVybGlua0ZvbGxvd2VkDQoJe2NvbG9yOnB1cnBsZTsNCgl0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO30NCnAuTXNvUGxhaW5UZXh0LCBsaS5Nc29QbGFpblRleHQsIGRpdi5Nc29QbGFpblRleHQNCgl7bXNvLXN0eWxlLWxpbms6IlBsYWluIFRleHQgQ2hhciI7DQoJbWFyZ2luOjBpbjsNCgltYXJnaW4tYm90dG9tOi4wMDAxcHQ7DQoJZm9udC1zaXplOjExLjBwdDsNCglmb250LWZhbWlseToiQ2FsaWJyaSIsc2Fucy1zZXJpZjt9DQpwLk1zb0NvbW1lbnRTdWJqZWN0LCBsaS5Nc29Db21tZW50U3ViamVjdCwgZGl2Lk1zb0NvbW1lbnRTdWJqZWN0DQoJe21zby1zdHlsZS1saW5rOiJDb21tZW50IFN1YmplY3QgQ2hhciI7DQoJbWFyZ2luLXRvcDo2LjBwdDsNCgltYXJnaW4tcmlnaHQ6MGluOw0KCW1hcmdpbi1ib3R0b206Ni4wcHQ7DQoJbWFyZ2luLWxlZnQ6MGluOw0KCWZvbnQtc2l6ZToxMC4wcHQ7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjsNCglmb250LXdlaWdodDpib2xkO30NCnAuTXNvQWNldGF0ZSwgbGkuTXNvQWNldGF0ZSwgZGl2Lk1zb0FjZXRhdGUNCgl7bXNvLXN0eWxlLWxpbms6IkJhbGxvb24gVGV4dCBDaGFyIjsNCgltYXJnaW46MGluOw0KCW1hcmdpbi1ib3R0b206LjAwMDFwdDsNCglmb250LXNpemU6OC4wcHQ7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjt9DQpzcGFuLkhlYWRpbmcxQ2hhcg0KCXttc28tc3R5bGUtbmFtZToiSGVhZGluZyAxIENoYXIiOw0KCW1zby1zdHlsZS1saW5rOiJIZWFkaW5nIDEiOw0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQoJZm9udC13ZWlnaHQ6Ym9sZDt9DQpzcGFuLkhlYWRpbmcyQ2hhcg0KCXttc28tc3R5bGUtbmFtZToiSGVhZGluZyAyIENoYXIiOw0KCW1zby1zdHlsZS1saW5rOiJIZWFkaW5nIDIiOw0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQoJZm9udC13ZWlnaHQ6Ym9sZDt9DQpzcGFuLkhlYWRpbmczQ2hhcg0KCXttc28tc3R5bGUtbmFtZToiSGVhZGluZyAzIENoYXIiOw0KCW1zby1zdHlsZS1saW5rOiJIZWFkaW5nIDMiOw0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7fQ0Kc3Bhbi5IZWFkaW5nNENoYXINCgl7bXNvLXN0eWxlLW5hbWU6IkhlYWRpbmcgNCBDaGFyIjsNCgltc28tc3R5bGUtbGluazoiSGVhZGluZyA0IjsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnNwYW4uSGVhZGluZzVDaGFyDQoJe21zby1zdHlsZS1uYW1lOiJIZWFkaW5nIDUgQ2hhciI7DQoJbXNvLXN0eWxlLWxpbms6IkhlYWRpbmcgNSI7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjt9DQpzcGFuLkhlYWRpbmc2Q2hhcg0KCXttc28tc3R5bGUtbmFtZToiSGVhZGluZyA2IENoYXIiOw0KCW1zby1zdHlsZS1saW5rOiJIZWFkaW5nIDYiOw0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7fQ0Kc3Bhbi5IZWFkaW5nN0NoYXINCgl7bXNvLXN0eWxlLW5hbWU6IkhlYWRpbmcgNyBDaGFyIjsNCgltc28tc3R5bGUtbGluazoiSGVhZGluZyA3IjsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnNwYW4uSGVhZGluZzhDaGFyDQoJe21zby1zdHlsZS1uYW1lOiJIZWFkaW5nIDggQ2hhciI7DQoJbXNvLXN0eWxlLWxpbms6IkhlYWRpbmcgOCI7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjt9DQpzcGFuLkhlYWRpbmc5Q2hhcg0KCXttc28tc3R5bGUtbmFtZToiSGVhZGluZyA5IENoYXIiOw0KCW1zby1zdHlsZS1saW5rOiJIZWFkaW5nIDkiOw0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7fQ0KcC5Cb2R5MSwgbGkuQm9keTEsIGRpdi5Cb2R5MQ0KCXttc28tc3R5bGUtbmFtZToiQm9keSAxIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDoxNy44NXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnAuQnVsbGV0MiwgbGkuQnVsbGV0MiwgZGl2LkJ1bGxldDINCgl7bXNvLXN0eWxlLW5hbWU6IkJ1bGxldCAyIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDouNWluOw0KCXRleHQtaW5kZW50Oi0xOC4xNXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnAuQnVsbGV0MywgbGkuQnVsbGV0MywgZGl2LkJ1bGxldDMNCgl7bXNvLXN0eWxlLW5hbWU6IkJ1bGxldCAzIjsNCgltc28tc3R5bGUtbGluazoiQnVsbGV0IDMgQ2hhcjEiOw0KCW1hcmdpbi10b3A6Ni4wcHQ7DQoJbWFyZ2luLXJpZ2h0OjBpbjsNCgltYXJnaW4tYm90dG9tOjYuMHB0Ow0KCW1hcmdpbi1sZWZ0OjUzLjg1cHQ7DQoJdGV4dC1pbmRlbnQ6LTE3Ljg1cHQ7DQoJZm9udC1zaXplOjkuNXB0Ow0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7fQ0KcC5IZWFkaW5nRVVMQSwgbGkuSGVhZGluZ0VVTEEsIGRpdi5IZWFkaW5nRVVMQQ0KCXttc28tc3R5bGUtbmFtZToiSGVhZGluZyBFVUxBIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDowaW47DQoJZm9udC1zaXplOjE0LjBwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmOw0KCWZvbnQtd2VpZ2h0OmJvbGQ7fQ0KcC5IZWFkaW5nU29mdHdhcmVUaXRsZSwgbGkuSGVhZGluZ1NvZnR3YXJlVGl0bGUsIGRpdi5IZWFkaW5nU29mdHdhcmVUaXRsZQ0KCXttc28tc3R5bGUtbmFtZToiSGVhZGluZyBTb2Z0d2FyZSBUaXRsZSI7DQoJbWFyZ2luLXRvcDo2LjBwdDsNCgltYXJnaW4tcmlnaHQ6MGluOw0KCW1hcmdpbi1ib3R0b206Ni4wcHQ7DQoJbWFyZ2luLWxlZnQ6MGluOw0KCWJvcmRlcjpub25lOw0KCXBhZGRpbmc6MGluOw0KCWZvbnQtc2l6ZToxNC4wcHQ7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjsNCglmb250LXdlaWdodDpib2xkO30NCnAuUHJlYW1ibGUsIGxpLlByZWFtYmxlLCBkaXYuUHJlYW1ibGUNCgl7bXNvLXN0eWxlLW5hbWU6UHJlYW1ibGU7DQoJbWFyZ2luLXRvcDo2LjBwdDsNCgltYXJnaW4tcmlnaHQ6MGluOw0KCW1hcmdpbi1ib3R0b206Ni4wcHQ7DQoJbWFyZ2luLWxlZnQ6MGluOw0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmOw0KCWZvbnQtd2VpZ2h0OmJvbGQ7fQ0KcC5QcmVhbWJsZUJvcmRlckFib3ZlLCBsaS5QcmVhbWJsZUJvcmRlckFib3ZlLCBkaXYuUHJlYW1ibGVCb3JkZXJBYm92ZQ0KCXttc28tc3R5bGUtbmFtZToiUHJlYW1ibGUgQm9yZGVyIEFib3ZlIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDowaW47DQoJYm9yZGVyOm5vbmU7DQoJcGFkZGluZzowaW47DQoJZm9udC1zaXplOjkuNXB0Ow0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQoJZm9udC13ZWlnaHQ6Ym9sZDt9DQpwLkJvZHkwQm9sZCwgbGkuQm9keTBCb2xkLCBkaXYuQm9keTBCb2xkDQoJe21zby1zdHlsZS1uYW1lOiJCb2R5IDAgQm9sZCI7DQoJbWFyZ2luOjBpbjsNCgltYXJnaW4tYm90dG9tOi4wMDAxcHQ7DQoJZm9udC1zaXplOjkuNXB0Ow0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQoJZm9udC13ZWlnaHQ6Ym9sZDt9DQpwLkJvZHkwLCBsaS5Cb2R5MCwgZGl2LkJvZHkwDQoJe21zby1zdHlsZS1uYW1lOiJCb2R5IDAiOw0KCW1hcmdpbjowaW47DQoJbWFyZ2luLWJvdHRvbTouMDAwMXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnNwYW4uQmFsbG9vblRleHRDaGFyDQoJe21zby1zdHlsZS1uYW1lOiJCYWxsb29uIFRleHQgQ2hhciI7DQoJbXNvLXN0eWxlLWxpbms6IkJhbGxvb24gVGV4dCI7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjt9DQpwLkJ1bGxldDEsIGxpLkJ1bGxldDEsIGRpdi5CdWxsZXQxDQoJe21zby1zdHlsZS1uYW1lOiJCdWxsZXQgMSI7DQoJbWFyZ2luLXRvcDo2LjBwdDsNCgltYXJnaW4tcmlnaHQ6MGluOw0KCW1hcmdpbi1ib3R0b206Ni4wcHQ7DQoJbWFyZ2luLWxlZnQ6MTcuODVwdDsNCgl0ZXh0LWluZGVudDotMTcuODVwdDsNCglmb250LXNpemU6OS41cHQ7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjt9DQpwLkJ1bGxldDQsIGxpLkJ1bGxldDQsIGRpdi5CdWxsZXQ0DQoJe21zby1zdHlsZS1uYW1lOiJCdWxsZXQgNCI7DQoJbWFyZ2luLXRvcDo2LjBwdDsNCgltYXJnaW4tcmlnaHQ6MGluOw0KCW1hcmdpbi1ib3R0b206Ni4wcHQ7DQoJbWFyZ2luLWxlZnQ6NzEuNzVwdDsNCgl0ZXh0LWluZGVudDotMTcuOXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnAuQnVsbGV0NSwgbGkuQnVsbGV0NSwgZGl2LkJ1bGxldDUNCgl7bXNvLXN0eWxlLW5hbWU6IkJ1bGxldCA1IjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDo4OS42cHQ7DQoJdGV4dC1pbmRlbnQ6LTE3Ljg1cHQ7DQoJZm9udC1zaXplOjkuNXB0Ow0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7fQ0KcC5IZWFkaW5nM0JvbGQsIGxpLkhlYWRpbmczQm9sZCwgZGl2LkhlYWRpbmczQm9sZA0KCXttc28tc3R5bGUtbmFtZToiSGVhZGluZyAzIEJvbGQiOw0KCW1zby1zdHlsZS1saW5rOiJIZWFkaW5nIDMgQm9sZCBDaGFyIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDo1My44NXB0Ow0KCXRleHQtaW5kZW50Oi0xNy44NXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmOw0KCWZvbnQtd2VpZ2h0OmJvbGQ7fQ0KcC5CdWxsZXQ0VW5kZXJsaW5lLCBsaS5CdWxsZXQ0VW5kZXJsaW5lLCBkaXYuQnVsbGV0NFVuZGVybGluZQ0KCXttc28tc3R5bGUtbmFtZToiQnVsbGV0IDQgVW5kZXJsaW5lIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDo3MS43NXB0Ow0KCXRleHQtaW5kZW50Oi0xNy45cHQ7DQoJZm9udC1zaXplOjkuNXB0Ow0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQoJdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTt9DQpzcGFuLkJvZHkyQ2hhcg0KCXttc28tc3R5bGUtbmFtZToiQm9keSAyIENoYXIiOw0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7fQ0Kc3Bhbi5Cb2R5M0NoYXINCgl7bXNvLXN0eWxlLW5hbWU6IkJvZHkgMyBDaGFyIjsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnNwYW4uQ29tbWVudFRleHRDaGFyDQoJe21zby1zdHlsZS1uYW1lOiJDb21tZW50IFRleHQgQ2hhciI7DQoJbXNvLXN0eWxlLWxpbms6IkNvbW1lbnQgVGV4dCI7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjt9DQpzcGFuLkNvbW1lbnRTdWJqZWN0Q2hhcg0KCXttc28tc3R5bGUtbmFtZToiQ29tbWVudCBTdWJqZWN0IENoYXIiOw0KCW1zby1zdHlsZS1saW5rOiJDb21tZW50IFN1YmplY3QiOw0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQoJZm9udC13ZWlnaHQ6Ym9sZDt9DQpzcGFuLkJ1bGxldDNDaGFyMQ0KCXttc28tc3R5bGUtbmFtZToiQnVsbGV0IDMgQ2hhcjEiOw0KCW1zby1zdHlsZS1saW5rOiJCdWxsZXQgMyI7DQoJZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjt9DQpwLkJ1bGxldDRVbmRlcmxpbmVkLCBsaS5CdWxsZXQ0VW5kZXJsaW5lZCwgZGl2LkJ1bGxldDRVbmRlcmxpbmVkDQoJe21zby1zdHlsZS1uYW1lOiJCdWxsZXQgNCBVbmRlcmxpbmVkIjsNCgltYXJnaW4tdG9wOjYuMHB0Ow0KCW1hcmdpbi1yaWdodDowaW47DQoJbWFyZ2luLWJvdHRvbTo2LjBwdDsNCgltYXJnaW4tbGVmdDoxNy44NXB0Ow0KCXRleHQtaW5kZW50Oi0xNy44NXB0Ow0KCWZvbnQtc2l6ZTo5LjVwdDsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmOw0KCXRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7fQ0Kc3Bhbi5IZWFkaW5nM0JvbGRDaGFyDQoJe21zby1zdHlsZS1uYW1lOiJIZWFkaW5nIDMgQm9sZCBDaGFyIjsNCgltc28tc3R5bGUtbGluazoiSGVhZGluZyAzIEJvbGQiOw0KCWZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQoJZm9udC13ZWlnaHQ6Ym9sZDt9DQpzcGFuLlBsYWluVGV4dENoYXINCgl7bXNvLXN0eWxlLW5hbWU6IlBsYWluIFRleHQgQ2hhciI7DQoJbXNvLXN0eWxlLWxpbms6IlBsYWluIFRleHQiOw0KCWZvbnQtZmFtaWx5OiJDYWxpYnJpIixzYW5zLXNlcmlmO30NCnNwYW4uSGVhZGVyQ2hhcg0KCXttc28tc3R5bGUtbmFtZToiSGVhZGVyIENoYXIiOw0KCW1zby1zdHlsZS1saW5rOkhlYWRlcjsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnNwYW4uRm9vdGVyQ2hhcg0KCXttc28tc3R5bGUtbmFtZToiRm9vdGVyIENoYXIiOw0KCW1zby1zdHlsZS1saW5rOkZvb3RlcjsNCglmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmO30NCnAuYnVsbGV0MzAsIGxpLmJ1bGxldDMwLCBkaXYuYnVsbGV0MzANCgl7bXNvLXN0eWxlLW5hbWU6YnVsbGV0MzsNCgltYXJnaW4tcmlnaHQ6MGluOw0KCW1hcmdpbi1sZWZ0OjBpbjsNCglmb250LXNpemU6MTIuMHB0Ow0KCWZvbnQtZmFtaWx5OiJUaW1lcyBOZXcgUm9tYW4iLHNlcmlmO30NCnAuYnVsbGV0NDAsIGxpLmJ1bGxldDQwLCBkaXYuYnVsbGV0NDANCgl7bXNvLXN0eWxlLW5hbWU6YnVsbGV0NDsNCgltYXJnaW4tcmlnaHQ6MGluOw0KCW1hcmdpbi1sZWZ0OjBpbjsNCglmb250LXNpemU6MTIuMHB0Ow0KCWZvbnQtZmFtaWx5OiJUaW1lcyBOZXcgUm9tYW4iLHNlcmlmO30NCi5Nc29DaHBEZWZhdWx0DQoJe2ZvbnQtZmFtaWx5OiJDYWxpYnJpIixzYW5zLXNlcmlmO30NCi5Nc29QYXBEZWZhdWx0DQoJe21hcmdpbi1sZWZ0Oi4yNWluOw0KCXRleHQtaW5kZW50Oi0uMjVpbjt9DQogLyogUGFnZSBEZWZpbml0aW9ucyAqLw0KIEBwYWdlIFdvcmRTZWN0aW9uMQ0KCXtzaXplOjguNWluIDExLjBpbjsNCgltYXJnaW46MS4waW4gMS4waW4gMS4waW4gMS4waW47fQ0KZGl2LldvcmRTZWN0aW9uMQ0KCXtwYWdlOldvcmRTZWN0aW9uMTt9DQogLyogTGlzdCBEZWZpbml0aW9ucyAqLw0KIG9sDQoJe21hcmdpbi1ib3R0b206MGluO30NCnVsDQoJe21hcmdpbi1ib3R0b206MGluO30NCi0tPg0KPC9zdHlsZT4NCg0KPC9oZWFkPg0KDQo8Ym9keSBsYW5nPUVOLVVTIGxpbms9Ymx1ZSB2bGluaz1wdXJwbGU+DQoNCjxkaXYgY2xhc3M9V29yZFNlY3Rpb24xPg0KDQo8cCBjbGFzcz1IZWFkaW5nRVVMQT48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+TUlDUk9TT0ZUIFNPRlRXQVJFIExJQ0VOU0UNClRFUk1TPC9zcGFuPjwvcD4NCg0KPGRpdiBzdHlsZT0nYm9yZGVyOm5vbmU7Ym9yZGVyLWJvdHRvbTpzb2xpZCB3aW5kb3d0ZXh0IDEuMHB0O3BhZGRpbmc6MGluIDBpbiAxLjBwdCAwaW4nPg0KDQo8cCBjbGFzcz1IZWFkaW5nU29mdHdhcmVUaXRsZT48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+TUlDUk9TT0ZUIC5ORVQNCkxJQlJBUlk8L3NwYW4+PC9wPg0KDQo8L2Rpdj4NCg0KPHAgY2xhc3M9UHJlYW1ibGU+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC13ZWlnaHQ6bm9ybWFsJz5UaGVzZQ0KbGljZW5zZSB0ZXJtcyBhcmUgYW4gYWdyZWVtZW50IGJldHdlZW4geW91IGFuZCBNaWNyb3NvZnQgQ29ycG9yYXRpb24gKG9yIGJhc2VkDQpvbiB3aGVyZSB5b3UgbGl2ZSwgb25lIG9mIGl0cyBhZmZpbGlhdGVzKS4gVGhleSBhcHBseSB0byB0aGUgc29mdHdhcmUgbmFtZWQNCmFib3ZlLiBUaGUgdGVybXMgYWxzbyBhcHBseSB0byBhbnkgTWljcm9zb2Z0IHNlcnZpY2VzIG9yIHVwZGF0ZXMgZm9yIHRoZQ0Kc29mdHdhcmUsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRob3NlIGhhdmUgZGlmZmVyZW50IHRlcm1zLjwvc3Bhbj48L3A+DQoNCjxkaXYgc3R5bGU9J2JvcmRlcjpub25lO2JvcmRlci10b3A6c29saWQgd2luZG93dGV4dCAxLjBwdDtwYWRkaW5nOjEuMHB0IDBpbiAwaW4gMGluJz4NCg0KPHAgY2xhc3M9UHJlYW1ibGVCb3JkZXJBYm92ZT48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2UnPklmDQp5b3UgY29tcGx5IHdpdGggdGhlc2UgbGljZW5zZSB0ZXJtcywgeW91IGhhdmUgdGhlIHJpZ2h0cyBiZWxvdy48L3NwYW4+PC9wPg0KDQo8L2Rpdj4NCg0KPGgxIHN0eWxlPSdtYXJnaW4tdG9wOjYuMHB0O21hcmdpbi1yaWdodDowaW47bWFyZ2luLWJvdHRvbTowaW47bWFyZ2luLWxlZnQ6DQouMjVpbjttYXJnaW4tYm90dG9tOi4wMDAxcHQ7dGV4dC1pbmRlbnQ6LS4yNWluJz48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+MS48c3Bhbg0Kc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiZuYnNwOyZuYnNwOyZuYnNwOyA8L3NwYW4+PC9zcGFuPjxzcGFuDQpzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+SU5TVEFMTEFUSU9OIEFORCBVU0UgUklHSFRTLiA8L3NwYW4+PC9oMT4NCg0KPHAgY2xhc3M9QnVsbGV0MyBzdHlsZT0nbWFyZ2luLXRvcDowaW47bWFyZ2luLXJpZ2h0OjBpbjttYXJnaW4tYm90dG9tOjYuMHB0Ow0KbWFyZ2luLWxlZnQ6LjI1aW47dGV4dC1pbmRlbnQ6MGluJz48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+WW91IG1heQ0KaW5zdGFsbCBhbmQgdXNlIGFueSBudW1iZXIgb2YgY29waWVzIG9mIHRoZSBzb2Z0d2FyZSA8L3NwYW4+PHNwYW4NCnN0eWxlPSdmb250LXNpemU6MTAuMHB0O2NvbG9yOmJsYWNrJz50byBkZXZlbG9wIGFuZCB0ZXN0IHlvdXIgYXBwbGljYXRpb25zLiZuYnNwOw0KPC9zcGFuPjwvcD4NCg0KPGgxPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz4yLjxzcGFuIHN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsNCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPlRISVJEIFBBUlRZIENPTVBPTkVOVFMuIDwvc3Bhbj48c3Bhbg0Kc3R5bGU9J2ZvbnQtd2VpZ2h0Om5vcm1hbCc+VGhlIHNvZnR3YXJlIG1heSBpbmNsdWRlIHRoaXJkIHBhcnR5IGNvbXBvbmVudHMgd2l0aA0Kc2VwYXJhdGUgbGVnYWwgbm90aWNlcyBvciBnb3Zlcm5lZCBieSBvdGhlciBhZ3JlZW1lbnRzLCBhcyBtYXkgYmUgZGVzY3JpYmVkIGluDQp0aGUgVGhpcmRQYXJ0eU5vdGljZXMgZmlsZShzKSA8L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC13ZWlnaHQ6DQpub3JtYWwnPmFjY29tcGFueWluZyB0aGUgc29mdHdhcmUuPC9zcGFuPjwvaDE+DQoNCjxoMT48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+My48c3BhbiBzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7DQo8L3NwYW4+PC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2NvbG9yOmJsYWNrJz5BRERJVElPTkFMIExJQ0VOU0lORw0KUkVRVUlSRU1FTlRTIEFORC9PUiBVU0UgUklHSFRTLjwvc3Bhbj48L2gxPg0KDQo8aDI+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Y29sb3I6YmxhY2snPmEuPHNwYW4gc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOw0KPC9zcGFuPjwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtjb2xvcjpibGFjayc+RElTVFJJQlVUQUJMRQ0KQ09ERS4mbmJzcDsgPC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2NvbG9yOmJsYWNrO2ZvbnQtd2VpZ2h0Om5vcm1hbCc+VDwvc3Bhbj48c3Bhbg0Kc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Y29sb3I6YmxhY2s7Zm9udC13ZWlnaHQ6bm9ybWFsJz5oZSBzb2Z0d2FyZSBpcw0KY29tcHJpc2VkIG9mIERpc3RyaWJ1dGFibGUgQ29kZS4gk0Rpc3RyaWJ1dGFibGUgQ29kZZQgaXMgY29kZSB0aGF0IHlvdSBhcmUNCnBlcm1pdHRlZCB0byBkaXN0cmlidXRlIGluIGFwcGxpY2F0aW9ucyB5b3UgZGV2ZWxvcCBpZiB5b3UgY29tcGx5IHdpdGggdGhlDQp0ZXJtcyBiZWxvdy48L3NwYW4+PC9oMj4NCg0KPGgzIHN0eWxlPSdtYXJnaW4tdG9wOjBpbjttYXJnaW4tcmlnaHQ6MGluO21hcmdpbi1ib3R0b206MGluO21hcmdpbi1sZWZ0OjUzLjg1cHQ7DQptYXJnaW4tYm90dG9tOi4wMDAxcHQnPjxiPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2NvbG9yOmJsYWNrJz5pLjxzcGFuDQpzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7IDwvc3Bhbj48L3NwYW4+PC9iPjxiPjxzcGFuDQpzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtjb2xvcjpibGFjayc+UmlnaHQgdG8gVXNlIGFuZCBEaXN0cmlidXRlLiA8L3NwYW4+PC9iPjwvaDM+DQoNCjxwIGNsYXNzPWJ1bGxldDMwIHN0eWxlPSdtYXJnaW4tdG9wOjYuMHB0O21hcmdpbi1yaWdodDowaW47bWFyZ2luLWJvdHRvbTo2LjBwdDsNCm1hcmdpbi1sZWZ0OjEuMGluO3RleHQtaW5kZW50Oi0uMjVpbic+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC1mYW1pbHk6DQpTeW1ib2w7Y29sb3I6YmxhY2snPrc8c3BhbiBzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7DQo8L3NwYW4+PC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2ZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQpjb2xvcjpibGFjayc+WW91IG1heSBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBvYmplY3QgY29kZSBmb3JtIG9mIHRoZSBzb2Z0d2FyZS48L3NwYW4+PC9wPg0KDQo8cCBjbGFzcz1idWxsZXQzMCBzdHlsZT0nbWFyZ2luLXRvcDo2LjBwdDttYXJnaW4tcmlnaHQ6MGluO21hcmdpbi1ib3R0b206Ni4wcHQ7DQptYXJnaW4tbGVmdDoxLjBpbjt0ZXh0LWluZGVudDotLjI1aW4nPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2ZvbnQtZmFtaWx5Og0KU3ltYm9sO2NvbG9yOmJsYWNrJz63PHNwYW4gc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOw0KPC9zcGFuPjwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmOw0KY29sb3I6YmxhY2snPlRoaXJkIFBhcnR5IERpc3RyaWJ1dGlvbi4gWW91IG1heSBwZXJtaXQgZGlzdHJpYnV0b3JzIG9mIHlvdXIgYXBwbGljYXRpb25zDQp0byBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgYXMgcGFydCBvZiB0aG9zZSBhcHBsaWNhdGlvbnMuPC9zcGFuPjwvcD4NCg0KPGgzIHN0eWxlPSdtYXJnaW4tdG9wOjBpbjttYXJnaW4tcmlnaHQ6MGluO21hcmdpbi1ib3R0b206MGluO21hcmdpbi1sZWZ0OjUzLjg1cHQ7DQptYXJnaW4tYm90dG9tOi4wMDAxcHQnPjxiPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2NvbG9yOmJsYWNrJz5paS48c3Bhbg0Kc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyA8L3NwYW4+PC9zcGFuPjwvYj48Yj48c3Bhbg0Kc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Y29sb3I6YmxhY2snPkRpc3RyaWJ1dGlvbiBSZXF1aXJlbWVudHMuIEZvciBhbnkNCkRpc3RyaWJ1dGFibGUgQ29kZSB5b3UgZGlzdHJpYnV0ZSwgeW91IG11c3Q8L3NwYW4+PC9iPjwvaDM+DQoNCjxwIGNsYXNzPWJ1bGxldDMwIHN0eWxlPSdtYXJnaW4tdG9wOjYuMHB0O21hcmdpbi1yaWdodDowaW47bWFyZ2luLWJvdHRvbTo2LjBwdDsNCm1hcmdpbi1sZWZ0OjEuMGluO3RleHQtaW5kZW50Oi0uMjVpbic+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC1mYW1pbHk6DQpTeW1ib2w7Y29sb3I6YmxhY2snPrc8c3BhbiBzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7DQo8L3NwYW4+PC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2ZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQpjb2xvcjpibGFjayc+dXNlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgaW4geW91ciBhcHBsaWNhdGlvbnMgYW5kIG5vdCBhcyBhDQpzdGFuZGFsb25lIGRpc3RyaWJ1dGlvbjs8L3NwYW4+PC9wPg0KDQo8cCBjbGFzcz1idWxsZXQzMCBzdHlsZT0nbWFyZ2luLXRvcDo2LjBwdDttYXJnaW4tcmlnaHQ6MGluO21hcmdpbi1ib3R0b206Ni4wcHQ7DQptYXJnaW4tbGVmdDoxLjBpbjt0ZXh0LWluZGVudDotLjI1aW4nPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2ZvbnQtZmFtaWx5Og0KU3ltYm9sO2NvbG9yOmJsYWNrJz63PHNwYW4gc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOw0KPC9zcGFuPjwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmOw0KY29sb3I6YmxhY2snPnJlcXVpcmUgZGlzdHJpYnV0b3JzIGFuZCBleHRlcm5hbCBlbmQgdXNlcnMgdG8gYWdyZWUgdG8gdGVybXMgdGhhdA0KcHJvdGVjdCBpdCBhdCBsZWFzdCBhcyBtdWNoIGFzIHRoaXMgYWdyZWVtZW50OyBhbmQ8L3NwYW4+PC9wPg0KDQo8cCBjbGFzcz1idWxsZXQzMCBzdHlsZT0nbWFyZ2luLXRvcDo2LjBwdDttYXJnaW4tcmlnaHQ6MGluO21hcmdpbi1ib3R0b206Ni4wcHQ7DQptYXJnaW4tbGVmdDoxLjBpbjt0ZXh0LWluZGVudDotLjI1aW4nPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2ZvbnQtZmFtaWx5Og0KU3ltYm9sO2NvbG9yOmJsYWNrJz63PHNwYW4gc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOw0KPC9zcGFuPjwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtmb250LWZhbWlseToiVGFob21hIixzYW5zLXNlcmlmOw0KY29sb3I6YmxhY2snPmluZGVtbmlmeSwgZGVmZW5kLCBhbmQgaG9sZCBoYXJtbGVzcyBNaWNyb3NvZnQgZnJvbSBhbnkgY2xhaW1zLA0KaW5jbHVkaW5nIGF0dG9ybmV5c5IgZmVlcywgcmVsYXRlZCB0byB0aGUgZGlzdHJpYnV0aW9uIG9yIHVzZSBvZiB5b3VyIGFwcGxpY2F0aW9ucywNCmV4Y2VwdCB0byB0aGUgZXh0ZW50IHRoYXQgYW55IGNsYWltIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgdW5tb2RpZmllZCBEaXN0cmlidXRhYmxlDQpDb2RlLjwvc3Bhbj48L3A+DQoNCjxoMyBzdHlsZT0nbWFyZ2luLXRvcDowaW47bWFyZ2luLXJpZ2h0OjBpbjttYXJnaW4tYm90dG9tOjBpbjttYXJnaW4tbGVmdDo1My44NXB0Ow0KbWFyZ2luLWJvdHRvbTouMDAwMXB0Jz48Yj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtjb2xvcjpibGFjayc+aWlpLjxzcGFuDQpzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7IDwvc3Bhbj48L3NwYW4+PC9iPjxiPjxzcGFuDQpzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtjb2xvcjpibGFjayc+RGlzdHJpYnV0aW9uIFJlc3RyaWN0aW9ucy4gWW91IG1heSBub3Q8L3NwYW4+PC9iPjwvaDM+DQoNCjxwIGNsYXNzPWJ1bGxldDMwIHN0eWxlPSdtYXJnaW4tdG9wOjYuMHB0O21hcmdpbi1yaWdodDowaW47bWFyZ2luLWJvdHRvbTo2LjBwdDsNCm1hcmdpbi1sZWZ0OjEuMGluO3RleHQtaW5kZW50Oi0uMjVpbic+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC1mYW1pbHk6DQpTeW1ib2w7Y29sb3I6YmxhY2snPrc8c3BhbiBzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7DQo8L3NwYW4+PC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2ZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQpjb2xvcjpibGFjayc+dXNlIE1pY3Jvc29mdJJzIHRyYWRlbWFya3MgaW4geW91ciBhcHBsaWNhdGlvbnOSIG5hbWVzIG9yIGluIGEgd2F5DQp0aGF0IHN1Z2dlc3RzIHlvdXIgYXBwbGljYXRpb25zIGNvbWUgZnJvbSBvciBhcmUgZW5kb3JzZWQgYnkgTWljcm9zb2Z0OyBvcjwvc3Bhbj48L3A+DQoNCjxwIGNsYXNzPWJ1bGxldDMwIHN0eWxlPSdtYXJnaW4tdG9wOjYuMHB0O21hcmdpbi1yaWdodDowaW47bWFyZ2luLWJvdHRvbTo2LjBwdDsNCm1hcmdpbi1sZWZ0OjEuMGluO3RleHQtaW5kZW50Oi0uMjVpbic+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC1mYW1pbHk6DQpTeW1ib2w7Y29sb3I6YmxhY2snPrc8c3BhbiBzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7DQo8L3NwYW4+PC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2ZvbnQtZmFtaWx5OiJUYWhvbWEiLHNhbnMtc2VyaWY7DQpjb2xvcjpibGFjayc+bW9kaWZ5IG9yIGRpc3RyaWJ1dGUgdGhlIHNvdXJjZSBjb2RlIG9mIGFueSBEaXN0cmlidXRhYmxlIENvZGUgc28NCnRoYXQgYW55IHBhcnQgb2YgaXQgYmVjb21lcyBzdWJqZWN0IHRvIGFuIEV4Y2x1ZGVkIExpY2Vuc2UuIEFuIJNFeGNsdWRlZA0KTGljZW5zZZQgaXMgb25lIHRoYXQgcmVxdWlyZXMsIGFzIGEgY29uZGl0aW9uIG9mIHVzZSwgbW9kaWZpY2F0aW9uIG9yDQpkaXN0cmlidXRpb24gb2YgY29kZSwgdGhhdCAoaSkgaXQgYmUgZGlzY2xvc2VkIG9yIGRpc3RyaWJ1dGVkIGluIHNvdXJjZSBjb2RlDQpmb3JtOyBvciAoaWkpIG90aGVycyBoYXZlIHRoZSByaWdodCB0byBtb2RpZnkgaXQuPC9zcGFuPjwvcD4NCg0KPGgxPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz40LjxzcGFuIHN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsNCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPkRBVEEuPC9zcGFuPjwvaDE+DQoNCjxoMj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+YS48c3BhbiBzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7DQo8L3NwYW4+PC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz5EYXRhIENvbGxlY3Rpb24uIDwvc3Bhbj48c3Bhbg0Kc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC13ZWlnaHQ6bm9ybWFsJz5UaGUgc29mdHdhcmUgbWF5IGNvbGxlY3QNCmluZm9ybWF0aW9uIGFib3V0IHlvdSBhbmQgeW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlLCBhbmQgc2VuZCB0aGF0IHRvIE1pY3Jvc29mdC4NCk1pY3Jvc29mdCBtYXkgdXNlIHRoaXMgaW5mb3JtYXRpb24gdG8gcHJvdmlkZSBzZXJ2aWNlcyBhbmQgaW1wcm92ZSBvdXIgcHJvZHVjdHMNCmFuZCBzZXJ2aWNlcy6gIFlvdSBtYXkgb3B0LW91dCBvZiBtYW55IG9mIHRoZXNlIHNjZW5hcmlvcywgYnV0IG5vdCBhbGwsIGFzDQpkZXNjcmliZWQgaW4gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24uoCBUaGVyZSBhcmUgYWxzbyBzPHNwYW4NCnN0eWxlPSdjb2xvcjpibGFjayc+b21lIGZlYXR1cmVzIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG1heSBlbmFibGUgeW91IGFuZA0KTWljcm9zb2Z0IHRvIGNvbGxlY3QgZGF0YSBmcm9tIHVzZXJzIG9mIHlvdXIgYXBwbGljYXRpb25zLjwvc3Bhbj4gSWYgeW91IHVzZQ0KdGhlc2UgZmVhdHVyZXMsIHlvdSBtdXN0IGNvbXBseSB3aXRoIGFwcGxpY2FibGUgbGF3LCBpbmNsdWRpbmcgcHJvdmlkaW5nDQphcHByb3ByaWF0ZSBub3RpY2VzIHRvIHVzZXJzIG9mIHlvdXIgYXBwbGljYXRpb25zIHRvZ2V0aGVyIHdpdGggTWljcm9zb2Z0knMNCnByaXZhY3kgc3RhdGVtZW50LiBPdXIgcHJpdmFjeSBzdGF0ZW1lbnQgaXMgbG9jYXRlZCBhdCA8L3NwYW4+PGENCmhyZWY9Imh0dHBzOi8vZ28ubWljcm9zb2Z0LmNvbS9md2xpbmsvP0xpbmtJRD04MjQ3MDQiPjxzcGFuIHN0eWxlPSdmb250LXNpemU6DQoxMC4wcHQ7Zm9udC13ZWlnaHQ6bm9ybWFsJz5odHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9ODI0NzA0PC9zcGFuPjwvYT48c3Bhbg0Kc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC13ZWlnaHQ6bm9ybWFsJz4uIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBkYXRhDQpjb2xsZWN0aW9uIGFuZCBpdHMgdXNlIGZyb20gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24gYW5kIG91ciBwcml2YWN5DQpzdGF0ZW1lbnQuIFlvdXIgdXNlIG9mIHRoZSBzb2Z0d2FyZSBvcGVyYXRlcyBhcyB5b3VyIGNvbnNlbnQgdG8gdGhlc2UNCnByYWN0aWNlcy48L3NwYW4+PC9oMj4NCg0KPGgyPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz5iLjxzcGFuIHN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsNCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPlByb2Nlc3Npbmcgb2YgUGVyc29uYWwgRGF0YS4gPC9zcGFuPjxzcGFuDQpzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtmb250LXdlaWdodDpub3JtYWwnPlRvIHRoZSBleHRlbnQgTWljcm9zb2Z0IGlzIGENCnByb2Nlc3NvciBvciBzdWJwcm9jZXNzb3Igb2YgcGVyc29uYWwgZGF0YSBpbiBjb25uZWN0aW9uIHdpdGggdGhlIHNvZnR3YXJlLA0KTWljcm9zb2Z0IG1ha2VzIHRoZSBjb21taXRtZW50cyBpbiB0aGUgRXVyb3BlYW4gVW5pb24gR2VuZXJhbCBEYXRhIFByb3RlY3Rpb24NClJlZ3VsYXRpb24gVGVybXMgb2YgdGhlIE9ubGluZSBTZXJ2aWNlcyBUZXJtcyB0byBhbGwgY3VzdG9tZXJzIGVmZmVjdGl2ZSBNYXkNCjI1LCAyMDE4LCBhdCA8L3NwYW4+PHNwYW4gY2xhc3M9TXNvSHlwZXJsaW5rPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Ow0KZm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjtmb250LXdlaWdodDpub3JtYWwnPmh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2xlZ2FsL2dkcHI8L3NwYW4+PC9zcGFuPjxzcGFuDQpzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtmb250LXdlaWdodDpub3JtYWwnPi48L3NwYW4+PC9oMj4NCg0KPGgxPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz41LjxzcGFuIHN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsNCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlJz5TY29wZSBvZg0KTGljZW5zZTwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+Ljwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOg0KMTAuMHB0O2ZvbnQtd2VpZ2h0Om5vcm1hbCc+IFRoZSBzb2Z0d2FyZSBpcyBsaWNlbnNlZCwgbm90IHNvbGQuIFRoaXMgYWdyZWVtZW50DQpvbmx5IGdpdmVzIHlvdSBzb21lIHJpZ2h0cyB0byB1c2UgdGhlIHNvZnR3YXJlLiBNaWNyb3NvZnQgcmVzZXJ2ZXMgYWxsIG90aGVyDQpyaWdodHMuIFVubGVzcyBhcHBsaWNhYmxlIGxhdyBnaXZlcyB5b3UgbW9yZSByaWdodHMgZGVzcGl0ZSB0aGlzIGxpbWl0YXRpb24sDQp5b3UgbWF5IHVzZSB0aGUgc29mdHdhcmUgb25seSBhcyBleHByZXNzbHkgcGVybWl0dGVkIGluIHRoaXMgYWdyZWVtZW50LiBJbg0KZG9pbmcgc28sIHlvdSBtdXN0IGNvbXBseSB3aXRoIGFueSB0ZWNobmljYWwgbGltaXRhdGlvbnMgaW4gdGhlIHNvZnR3YXJlIHRoYXQNCm9ubHkgYWxsb3cgeW91IHRvIHVzZSBpdCBpbiBjZXJ0YWluIHdheXMuIFlvdSBtYXkgbm90PC9zcGFuPjwvaDE+DQoNCjxwIGNsYXNzPUJ1bGxldDI+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC1mYW1pbHk6U3ltYm9sJz63PHNwYW4NCnN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsNCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPndvcmsgYXJvdW5kIGFueSB0ZWNobmljYWwNCmxpbWl0YXRpb25zIGluIHRoZSBzb2Z0d2FyZTwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+Ozwvc3Bhbj48L3A+DQoNCjxwIGNsYXNzPUJ1bGxldDI+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC1mYW1pbHk6U3ltYm9sJz63PHNwYW4NCnN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsNCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPnJldmVyc2UgZW5naW5lZXIsIGRlY29tcGlsZSBvcg0KZGlzYXNzZW1ibGUgdGhlIHNvZnR3YXJlLCBvciBvdGhlcndpc2UgYXR0ZW1wdCB0byBkZXJpdmUgdGhlIHNvdXJjZSBjb2RlIGZvcg0KdGhlIHNvZnR3YXJlLCBleGNlcHQgYW5kIHRvIHRoZSBleHRlbnQgcmVxdWlyZWQgYnkgdGhpcmQgcGFydHkgbGljZW5zaW5nIHRlcm1zDQpnb3Zlcm5pbmcgdXNlIG9mIGNlcnRhaW4gb3BlbiBzb3VyY2UgY29tcG9uZW50cyB0aGF0IG1heSBiZSBpbmNsdWRlZCBpbiB0aGUNCnNvZnR3YXJlOzwvc3Bhbj48L3A+DQoNCjxwIGNsYXNzPUJ1bGxldDI+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC1mYW1pbHk6U3ltYm9sJz63PHNwYW4NCnN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsNCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPnJlbW92ZSwgbWluaW1pemUsIGJsb2NrIG9yIG1vZGlmeQ0KYW55IG5vdGljZXMgb2YgTWljcm9zb2Z0IG9yIGl0cyBzdXBwbGllcnMgaW4gdGhlIHNvZnR3YXJlOyA8L3NwYW4+PC9wPg0KDQo8cCBjbGFzcz1CdWxsZXQyPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2ZvbnQtZmFtaWx5OlN5bWJvbCc+tzxzcGFuDQpzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7DQo8L3NwYW4+PC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz51c2UgdGhlIHNvZnR3YXJlIGluIGFueSB3YXkgdGhhdA0KaXMgYWdhaW5zdCB0aGUgbGF3OyBvcjwvc3Bhbj48L3A+DQoNCjxwIGNsYXNzPUJ1bGxldDI+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC1mYW1pbHk6U3ltYm9sJz63PHNwYW4NCnN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsNCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPnNoYXJlLCBwdWJsaXNoLCByZW50IG9yIGxlYXNlIHRoZQ0Kc29mdHdhcmUsIHByb3ZpZGUgdGhlIHNvZnR3YXJlIGFzIGEgc3RhbmQtYWxvbmUgb2ZmZXJpbmcgZm9yIG90aGVycyB0byB1c2UsIG9yDQp0cmFuc2ZlciB0aGUgc29mdHdhcmUgb3IgdGhpcyBhZ3JlZW1lbnQgdG8gYW55IHRoaXJkIHBhcnR5Ljwvc3Bhbj48L3A+DQoNCjxoMT48c3BhbiBjbGFzcz1Nc29IeXBlcmxpbms+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC1mYW1pbHk6IlRhaG9tYSIsc2Fucy1zZXJpZjsNCmNvbG9yOndpbmRvd3RleHQ7dGV4dC1kZWNvcmF0aW9uOm5vbmUnPjYuPHNwYW4gc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiZuYnNwOyZuYnNwOyZuYnNwOw0KPC9zcGFuPjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlJz5FeHBvcnQNClJlc3RyaWN0aW9uczwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+Ljwvc3Bhbj48c3Bhbg0Kc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7Zm9udC13ZWlnaHQ6bm9ybWFsJz4gPC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6DQoxMC4wcHQ7Zm9udC13ZWlnaHQ6bm9ybWFsJz5Zb3UgbXVzdCBjb21wbHkgd2l0aCBhbGwgZG9tZXN0aWMgYW5kIGludGVybmF0aW9uYWwNCmV4cG9ydCBsYXdzIGFuZCByZWd1bGF0aW9ucyB0aGF0IGFwcGx5IHRvIHRoZSBzb2Z0d2FyZSwgd2hpY2ggaW5jbHVkZQ0KcmVzdHJpY3Rpb25zIG9uIGRlc3RpbmF0aW9ucywgZW5kIHVzZXJzLCBhbmQgZW5kIHVzZS4gRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24NCm9uIGV4cG9ydCByZXN0cmljdGlvbnMsIHZpc2l0IHd3dy5taWNyb3NvZnQuY29tL2V4cG9ydGluZy48L3NwYW4+PHNwYW4NCmNsYXNzPU1zb0h5cGVybGluaz48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtmb250LXdlaWdodDpub3JtYWwnPiA8L3NwYW4+PC9zcGFuPjxzcGFuDQpzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtmb250LXdlaWdodDpub3JtYWwnPqA8L3NwYW4+PC9oMT4NCg0KPGgxPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz43LjxzcGFuIHN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsNCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlJz5TVVBQT1JUDQpTRVJWSUNFUy48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPiA8L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToNCjEwLjBwdDtmb250LXdlaWdodDpub3JtYWwnPkJlY2F1c2UgdGhpcyBzb2Z0d2FyZSBpcyCTYXMgaXMslCB3ZSBtYXkgbm90IHByb3ZpZGUNCnN1cHBvcnQgc2VydmljZXMgZm9yIGl0Ljwvc3Bhbj48L2gxPg0KDQo8aDE+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPjguPHNwYW4gc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiZuYnNwOyZuYnNwOyZuYnNwOw0KPC9zcGFuPjwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2UnPkVudGlyZQ0KQWdyZWVtZW50Ljwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDtmb250LXdlaWdodDpub3JtYWwnPiBUaGlzDQphZ3JlZW1lbnQsIGFuZCB0aGUgdGVybXMgZm9yIHN1cHBsZW1lbnRzLCB1cGRhdGVzLCBJbnRlcm5ldC1iYXNlZCBzZXJ2aWNlcyBhbmQNCnN1cHBvcnQgc2VydmljZXMgdGhhdCB5b3UgdXNlLCBhcmUgdGhlIGVudGlyZSBhZ3JlZW1lbnQgZm9yIHRoZSBzb2Z0d2FyZSBhbmQNCnN1cHBvcnQgc2VydmljZXMuPC9zcGFuPjwvaDE+DQoNCjxoMSBzdHlsZT0nbWFyZ2luLWxlZnQ6LjI1aW47dGV4dC1pbmRlbnQ6LS4yNWluJz48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+OS48c3Bhbg0Kc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiZuYnNwOyZuYnNwOyZuYnNwOyA8L3NwYW4+PC9zcGFuPjxzcGFuDQpzdHlsZT0nZm9udC1zaXplOjEwLjBwdDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2UnPkFwcGxpY2FibGUgTGF3PC9zcGFuPjxzcGFuDQpzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+LqAgPC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O2ZvbnQtd2VpZ2h0Og0Kbm9ybWFsJz5JZiB5b3UgYWNxdWlyZWQgdGhlIHNvZnR3YXJlIGluIHRoZSBVbml0ZWQgU3RhdGVzLCBXYXNoaW5ndG9uIGxhdw0KYXBwbGllcyB0byBpbnRlcnByZXRhdGlvbiBvZiBhbmQgY2xhaW1zIGZvciBicmVhY2ggb2YgdGhpcyBhZ3JlZW1lbnQsIGFuZCB0aGUNCmxhd3Mgb2YgdGhlIHN0YXRlIHdoZXJlIHlvdSBsaXZlIGFwcGx5IHRvIGFsbCBvdGhlciBjbGFpbXMuIElmIHlvdSBhY3F1aXJlZCB0aGUNCnNvZnR3YXJlIGluIGFueSBvdGhlciBjb3VudHJ5LCBpdHMgbGF3cyBhcHBseS48L3NwYW4+PC9oMT4NCg0KPGgxIHN0eWxlPSdtYXJnaW4tbGVmdDouMjVpbjt0ZXh0LWluZGVudDotLjI1aW4nPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz4xMC48c3Bhbg0Kc3R5bGU9J2ZvbnQ6Ny4wcHQgIlRpbWVzIE5ldyBSb21hbiInPiA8L3NwYW4+PC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6DQoxMC4wcHQnPkNPTlNVTUVSIFJJR0hUUzsgUkVHSU9OQUwgVkFSSUFUSU9OUy4gPC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6DQoxMC4wcHQ7Zm9udC13ZWlnaHQ6bm9ybWFsJz5UaGlzIGFncmVlbWVudCBkZXNjcmliZXMgY2VydGFpbiBsZWdhbCByaWdodHMuIFlvdQ0KbWF5IGhhdmUgb3RoZXIgcmlnaHRzLCBpbmNsdWRpbmcgY29uc3VtZXIgcmlnaHRzLCB1bmRlciB0aGUgbGF3cyBvZiB5b3VyIHN0YXRlDQpvciBjb3VudHJ5LiBTZXBhcmF0ZSBhbmQgYXBhcnQgZnJvbSB5b3VyIHJlbGF0aW9uc2hpcCB3aXRoIE1pY3Jvc29mdCwgeW91IG1heQ0KYWxzbyBoYXZlIHJpZ2h0cyB3aXRoIHJlc3BlY3QgdG8gdGhlIHBhcnR5IGZyb20gd2hpY2ggeW91IGFjcXVpcmVkIHRoZQ0Kc29mdHdhcmUuIFRoaXMgYWdyZWVtZW50IGRvZXMgbm90IGNoYW5nZSB0aG9zZSBvdGhlciByaWdodHMgaWYgdGhlIGxhd3Mgb2YgeW91cg0Kc3RhdGUgb3IgY291bnRyeSBkbyBub3QgcGVybWl0IGl0IHRvIGRvIHNvLiBGb3IgZXhhbXBsZSwgaWYgeW91IGFjcXVpcmVkIHRoZQ0Kc29mdHdhcmUgaW4gb25lIG9mIHRoZSBiZWxvdyByZWdpb25zLCBvciBtYW5kYXRvcnkgY291bnRyeSBsYXcgYXBwbGllcywgdGhlbg0KdGhlIGZvbGxvd2luZyBwcm92aXNpb25zIGFwcGx5IHRvIHlvdTo8L3NwYW4+PC9oMT4NCg0KPGgyIHN0eWxlPSdtYXJnaW4tbGVmdDozNS44NXB0O3RleHQtaW5kZW50Oi0uMjVpbic+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPmEpPHNwYW4NCnN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4mbmJzcDsmbmJzcDsmbmJzcDsgPC9zcGFuPjwvc3Bhbj48c3Bhbg0Kc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPkF1c3RyYWxpYS4gPC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Ow0KZm9udC13ZWlnaHQ6bm9ybWFsJz5Zb3UgaGF2ZSBzdGF0dXRvcnkgZ3VhcmFudGVlcyB1bmRlciB0aGUgQXVzdHJhbGlhbiBDb25zdW1lcg0KTGF3IGFuZCBub3RoaW5nIGluIHRoaXMgYWdyZWVtZW50IGlzIGludGVuZGVkIHRvIGFmZmVjdCB0aG9zZSByaWdodHMuPC9zcGFuPjwvaDI+DQoNCjxoMiBzdHlsZT0nbWFyZ2luLWxlZnQ6MzUuODVwdDt0ZXh0LWluZGVudDotLjI1aW4nPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz5iKTxzcGFuDQpzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7IDwvc3Bhbj48L3NwYW4+PHNwYW4NCnN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz5DYW5hZGEuIDwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdDsNCmZvbnQtd2VpZ2h0Om5vcm1hbCc+SWYgeW91IGFjcXVpcmVkIHRoaXMgc29mdHdhcmUgaW4gQ2FuYWRhLCB5b3UgbWF5IHN0b3ANCnJlY2VpdmluZyB1cGRhdGVzIGJ5IHR1cm5pbmcgb2ZmIHRoZSBhdXRvbWF0aWMgdXBkYXRlIGZlYXR1cmUsIGRpc2Nvbm5lY3RpbmcNCnlvdXIgZGV2aWNlIGZyb20gdGhlIEludGVybmV0IChpZiBhbmQgd2hlbiB5b3UgcmUtY29ubmVjdCB0byB0aGUgSW50ZXJuZXQsDQpob3dldmVyLCB0aGUgc29mdHdhcmUgd2lsbCByZXN1bWUgY2hlY2tpbmcgZm9yIGFuZCBpbnN0YWxsaW5nIHVwZGF0ZXMpLCBvciB1bmluc3RhbGxpbmcNCnRoZSBzb2Z0d2FyZS4gVGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiwgaWYgYW55LCBtYXkgYWxzbyBzcGVjaWZ5IGhvdyB0byB0dXJuDQpvZmYgdXBkYXRlcyBmb3IgeW91ciBzcGVjaWZpYyBkZXZpY2Ugb3Igc29mdHdhcmUuPC9zcGFuPjwvaDI+DQoNCjxoMiBzdHlsZT0nbWFyZ2luLWxlZnQ6MzUuODVwdDt0ZXh0LWluZGVudDotLjI1aW4nPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz5jKTxzcGFuDQpzdHlsZT0nZm9udDo3LjBwdCAiVGltZXMgTmV3IFJvbWFuIic+Jm5ic3A7Jm5ic3A7Jm5ic3A7IDwvc3Bhbj48L3NwYW4+PHNwYW4NCnN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz5HZXJtYW55IGFuZCBBdXN0cmlhPC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Ow0KZm9udC13ZWlnaHQ6bm9ybWFsJz4uPC9zcGFuPjwvaDI+DQoNCjxwIGNsYXNzPU1zb05vcm1hbCBzdHlsZT0nbWFyZ2luLWxlZnQ6MzUuODVwdCc+PGI+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPihpKTwvc3Bhbj48L2I+PHNwYW4NCnN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz6goKCgoKCgIDxiPldhcnJhbnR5PC9iPi4gVGhlIHNvZnR3YXJlIHdpbGwgcGVyZm9ybQ0Kc3Vic3RhbnRpYWxseSBhcyBkZXNjcmliZWQgaW4gYW55IE1pY3Jvc29mdCBtYXRlcmlhbHMgdGhhdCBhY2NvbXBhbnkgaXQuDQpIb3dldmVyLCBNaWNyb3NvZnQgZ2l2ZXMgbm8gY29udHJhY3R1YWwgZ3VhcmFudGVlIGluIHJlbGF0aW9uIHRvIHRoZSBzb2Z0d2FyZS48L3NwYW4+PC9wPg0KDQo8cCBjbGFzcz1Nc29Ob3JtYWwgc3R5bGU9J21hcmdpbi1sZWZ0OjM1Ljg1cHQnPjxiPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz4oaWkpPC9zcGFuPjwvYj48c3Bhbg0Kc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPqCgoKCgoCA8Yj5MaW1pdGF0aW9uIG9mIExpYWJpbGl0eTwvYj4uIEluIGNhc2Ugb2YNCmludGVudGlvbmFsIGNvbmR1Y3QsIGdyb3NzIG5lZ2xpZ2VuY2UsIGNsYWltcyBiYXNlZCBvbiB0aGUgUHJvZHVjdCBMaWFiaWxpdHkNCkFjdCwgYXMgd2VsbCBhcyBpbiBjYXNlIG9mIGRlYXRoIG9yIHBlcnNvbmFsIG9yIHBoeXNpY2FsIGluanVyeSwgTWljcm9zb2Z0IGlzDQpsaWFibGUgYWNjb3JkaW5nIHRvIHRoZSBzdGF0dXRvcnkgbGF3Ljwvc3Bhbj48L3A+DQoNCjxoMSBzdHlsZT0nbWFyZ2luLWxlZnQ6MjIuNXB0O3RleHQtaW5kZW50OjBpbic+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7DQpmb250LXdlaWdodDpub3JtYWwnPlN1YmplY3QgdG8gdGhlIGZvcmVnb2luZyBjbGF1c2UgKGlpKSwgTWljcm9zb2Z0IHdpbGwgb25seQ0KYmUgbGlhYmxlIGZvciBzbGlnaHQgbmVnbGlnZW5jZSBpZiBNaWNyb3NvZnQgaXMgaW4gYnJlYWNoIG9mIHN1Y2ggbWF0ZXJpYWwNCmNvbnRyYWN0dWFsIG9ibGlnYXRpb25zLCB0aGUgZnVsZmlsbG1lbnQgb2Ygd2hpY2ggZmFjaWxpdGF0ZSB0aGUgZHVlDQpwZXJmb3JtYW5jZSBvZiB0aGlzIGFncmVlbWVudCwgdGhlIGJyZWFjaCBvZiB3aGljaCB3b3VsZCBlbmRhbmdlciB0aGUgcHVycG9zZQ0Kb2YgdGhpcyBhZ3JlZW1lbnQgYW5kIHRoZSBjb21wbGlhbmNlIHdpdGggd2hpY2ggYSBwYXJ0eSBtYXkgY29uc3RhbnRseSB0cnVzdCBpbg0KKHNvLWNhbGxlZCAmcXVvdDtjYXJkaW5hbCBvYmxpZ2F0aW9ucyZxdW90OykuIEluIG90aGVyIGNhc2VzIG9mIHNsaWdodCBuZWdsaWdlbmNlLA0KTWljcm9zb2Z0IHdpbGwgbm90IGJlIGxpYWJsZSBmb3Igc2xpZ2h0IG5lZ2xpZ2VuY2U8L3NwYW4+PC9oMT4NCg0KPGgxPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZSc+MTEuPHNwYW4NCnN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4gPC9zcGFuPjwvc3Bhbj48c3BhbiBzdHlsZT0nZm9udC1zaXplOg0KMTAuMHB0O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZSc+RGlzY2xhaW1lciBvZiBXYXJyYW50eS48L3NwYW4+PHNwYW4NCnN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz4gVEhFIFNPRlRXQVJFIElTIExJQ0VOU0VEIJNBUy1JUy6UIFlPVSBCRUFSIFRIRSBSSVNLDQpPRiBVU0lORyBJVC4gTUlDUk9TT0ZUIEdJVkVTIE5PIEVYUFJFU1MgV0FSUkFOVElFUywgR1VBUkFOVEVFUyBPUiBDT05ESVRJT05TLg0KVE8gVEhFIEVYVEVOVCBQRVJNSVRURUQgVU5ERVIgWU9VUiBMT0NBTCBMQVdTLCBNSUNST1NPRlQgRVhDTFVERVMgVEhFIElNUExJRUQNCldBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQNCk5PTi1JTkZSSU5HRU1FTlQuIDwvc3Bhbj48L2gxPg0KDQo8aDE+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPjEyLjxzcGFuIHN0eWxlPSdmb250OjcuMHB0ICJUaW1lcyBOZXcgUm9tYW4iJz4NCjwvc3Bhbj48L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQ7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlJz5MaW1pdGF0aW9uDQpvbiBhbmQgRXhjbHVzaW9uIG9mIFJlbWVkaWVzIGFuZCBEYW1hZ2VzLiA8L3NwYW4+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPllPVQ0KQ0FOIFJFQ09WRVIgRlJPTSBNSUNST1NPRlQgQU5EIElUUyBTVVBQTElFUlMgT05MWSBESVJFQ1QgREFNQUdFUyBVUCBUTyBVLlMuDQokNS4wMC4gWU9VIENBTk5PVCBSRUNPVkVSIEFOWSBPVEhFUiBEQU1BR0VTLCBJTkNMVURJTkcgQ09OU0VRVUVOVElBTCwgTE9TVA0KUFJPRklUUywgU1BFQ0lBTCwgSU5ESVJFQ1QgT1IgSU5DSURFTlRBTCBEQU1BR0VTLjwvc3Bhbj48L2gxPg0KDQo8cCBjbGFzcz1Cb2R5MT48c3BhbiBzdHlsZT0nZm9udC1zaXplOjEwLjBwdCc+VGhpcyBsaW1pdGF0aW9uIGFwcGxpZXMgdG8gKGEpDQphbnl0aGluZyByZWxhdGVkIHRvIHRoZSBzb2Z0d2FyZSwgc2VydmljZXMsIGNvbnRlbnQgKGluY2x1ZGluZyBjb2RlKSBvbiB0aGlyZA0KcGFydHkgSW50ZXJuZXQgc2l0ZXMsIG9yIHRoaXJkIHBhcnR5IGFwcGxpY2F0aW9uczsgYW5kIChiKSBjbGFpbXMgZm9yIGJyZWFjaCBvZg0KY29udHJhY3QsIGJyZWFjaCBvZiB3YXJyYW50eSwgZ3VhcmFudGVlIG9yIGNvbmRpdGlvbiwgc3RyaWN0IGxpYWJpbGl0eSwNCm5lZ2xpZ2VuY2UsIG9yIG90aGVyIHRvcnQgdG8gdGhlIGV4dGVudCBwZXJtaXR0ZWQgYnkgYXBwbGljYWJsZSBsYXcuPC9zcGFuPjwvcD4NCg0KPHAgY2xhc3M9TXNvTm9ybWFsIHN0eWxlPSdtYXJnaW4tbGVmdDouMjVpbic+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxMC4wcHQnPkl0DQphbHNvIGFwcGxpZXMgZXZlbiBpZiBNaWNyb3NvZnQga25ldyBvciBzaG91bGQgaGF2ZSBrbm93biBhYm91dCB0aGUgcG9zc2liaWxpdHkNCm9mIHRoZSBkYW1hZ2VzLiBUaGUgYWJvdmUgbGltaXRhdGlvbiBvciBleGNsdXNpb24gbWF5IG5vdCBhcHBseSB0byB5b3UgYmVjYXVzZQ0KeW91ciBzdGF0ZSBvciBjb3VudHJ5IG1heSBub3QgYWxsb3cgdGhlIGV4Y2x1c2lvbiBvciBsaW1pdGF0aW9uIG9mIGluY2lkZW50YWwsDQpjb25zZXF1ZW50aWFsIG9yIG90aGVyIGRhbWFnZXMuPC9zcGFuPjwvcD4NCg0KPHAgY2xhc3M9TXNvTm9ybWFsPjxzcGFuIHN0eWxlPSdmb250LXNpemU6MTAuMHB0Jz4mbmJzcDs8L3NwYW4+PC9wPg0KDQo8L2Rpdj4NCg0KPC9ib2R5Pg0KDQo8L2h0bWw+DQo=
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:35 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/jive/0.1.0/jive.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: |-
        <?xml version="1.0" encoding="utf-8"?>
        <package xmlns="http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd">
          <metadata>
            <id>jive</id>
            <version>0.1.0</version>
            <authors>mo khan</authors>
            <owners>mo khan</owners>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <license type="expression">MIT</license>
            <licenseUrl>https://licenses.nuget.org/MIT</licenseUrl>
            <description>Add a little jive talk to your csharp.</description>
            <repository url="https://github.com/mokhan/jive.net" />
            <dependencies>
              <group targetFramework=".NETCoreApp3.0" />
            </dependencies>
          </metadata>
        </package>
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:35 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/xunit/2.4.0/xunit.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n
        \ <metadata minClientVersion=\"2.12\">\r\n    <id>xunit</id>\r\n    <version>2.4.0</version>\r\n
        \   <title>xUnit.net</title>\r\n    <authors>James Newkirk,Brad Wilson</authors>\r\n
        \   <owners>James Newkirk,Brad Wilson</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n
        \   <licenseUrl>https://raw.githubusercontent.com/xunit/xunit/master/license.txt</licenseUrl>\r\n
        \   <projectUrl>https://github.com/xunit/xunit</projectUrl>\r\n    <iconUrl>https://raw.githubusercontent.com/xunit/media/master/logo-512-transparent.png</iconUrl>\r\n
        \   <description>xUnit.net is a developer testing framework, built to support
        Test Driven Development, with a design goal of extreme simplicity and alignment
        with framework features.\r\n\r\nInstalling this package installs xunit.core,
        xunit.assert, and xunit.analyzers.</description>\r\n    <summary>xUnit.net
        is a developer testing framework, built to support Test Driven Development.</summary>\r\n
        \   <language>en-US</language>\r\n    <dependencies>\r\n      <dependency
        id=\"xunit.core\" version=\"[2.4.0]\" />\r\n      <dependency id=\"xunit.assert\"
        version=\"[2.4.0]\" />\r\n      <dependency id=\"xunit.analyzers\" version=\"0.10.0\"
        />\r\n    </dependencies>\r\n  </metadata>\r\n</package>"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:35 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/xunit/xunit/master/license.txt
    headers:
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: LICENSE
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:35 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/NHibernate/5.2.6/NHibernate.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n
        \ <metadata>\r\n    <id>NHibernate</id>\r\n    <version>5.2.6</version>\r\n
        \   <authors>NHibernate community, Hibernate community</authors>\r\n    <owners>NHibernate
        community, Hibernate community</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n
        \   <licenseUrl>https://raw.githubusercontent.com/nhibernate/nhibernate-core/master/LICENSE.txt</licenseUrl>\r\n
        \   <projectUrl>http://nhibernate.info/</projectUrl>\r\n    <iconUrl>https://raw.githubusercontent.com/nhibernate/nhibernate-core/master/logo/NHibernate-NuGet.png</iconUrl>\r\n
        \   <description>NHibernate is a mature, open source object-relational mapper
        for the .NET framework. It is actively developed, fully featured and used
        in thousands of successful projects.</description>\r\n    <releaseNotes>https://github.com/nhibernate/nhibernate-core/blob/5.2.6/releasenotes.txt</releaseNotes>\r\n
        \   <copyright>Licensed under LGPL.</copyright>\r\n    <tags>ORM O/RM DataBase
        DAL ObjectRelationalMapping NHibernate ADO.Net Core</tags>\r\n    <repository
        type=\"git\" url=\"https://github.com/nhibernate/nhibernate-core.git\" />\r\n
        \   <dependencies>\r\n      <group targetFramework=\".NETFramework4.6.1\">\r\n
        \       <dependency id=\"Antlr3.Runtime\" version=\"[3.5.1, 4.0.0)\" exclude=\"Build,Analyzers\"
        />\r\n        <dependency id=\"Iesi.Collections\" version=\"[4.0.4, 5.0.0)\"
        exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Remotion.Linq\"
        version=\"[2.2.0, 3.0.0)\" exclude=\"Build,Analyzers\" />\r\n        <dependency
        id=\"Remotion.Linq.EagerFetching\" version=\"[2.2.0, 3.0.0)\" exclude=\"Build,Analyzers\"
        />\r\n      </group>\r\n      <group targetFramework=\".NETCoreApp2.0\">\r\n
        \       <dependency id=\"Antlr3.Runtime\" version=\"[3.5.1, 4.0.0)\" exclude=\"Build,Analyzers\"
        />\r\n        <dependency id=\"Iesi.Collections\" version=\"[4.0.4, 5.0.0)\"
        exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Remotion.Linq\"
        version=\"[2.2.0, 3.0.0)\" exclude=\"Build,Analyzers\" />\r\n        <dependency
        id=\"Remotion.Linq.EagerFetching\" version=\"[2.2.0, 3.0.0)\" exclude=\"Build,Analyzers\"
        />\r\n        <dependency id=\"System.Configuration.ConfigurationManager\"
        version=\"4.4.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n      <group
        targetFramework=\".NETStandard2.0\">\r\n        <dependency id=\"Antlr3.Runtime\"
        version=\"[3.5.1, 4.0.0)\" exclude=\"Build,Analyzers\" />\r\n        <dependency
        id=\"Iesi.Collections\" version=\"[4.0.4, 5.0.0)\" exclude=\"Build,Analyzers\"
        />\r\n        <dependency id=\"Microsoft.CSharp\" version=\"4.4.1\" exclude=\"Build,Analyzers\"
        />\r\n        <dependency id=\"Remotion.Linq\" version=\"[2.2.0, 3.0.0)\"
        exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Remotion.Linq.EagerFetching\"
        version=\"[2.2.0, 3.0.0)\" exclude=\"Build,Analyzers\" />\r\n        <dependency
        id=\"System.Configuration.ConfigurationManager\" version=\"4.4.1\" exclude=\"Build,Analyzers\"
        />\r\n        <dependency id=\"System.Reflection.Emit\" version=\"4.3.0\"
        exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Reflection.Emit.Lightweight\"
        version=\"4.3.0\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n
        \   <frameworkAssemblies>\r\n      <frameworkAssembly assemblyName=\"Microsoft.CSharp\"
        targetFramework=\".NETFramework4.6.1\" />\r\n      <frameworkAssembly assemblyName=\"System.Configuration\"
        targetFramework=\".NETFramework4.6.1\" />\r\n      <frameworkAssembly assemblyName=\"System.ServiceModel\"
        targetFramework=\".NETFramework4.6.1\" />\r\n      <frameworkAssembly assemblyName=\"System.Transactions\"
        targetFramework=\".NETFramework4.6.1\" />\r\n    </frameworkAssemblies>\r\n
        \ </metadata>\r\n</package>"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:36 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/nhibernate/nhibernate-core/master/LICENSE.txt
    headers:
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: "                  GNU LESSER GENERAL PUBLIC LICENSE\n                     Version
        2.1, February 1999\n\n       Copyright (C) 1991, 1999 Free Software Foundation,
        Inc.\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n     Everyone
        is permitted to copy and distribute verbatim copies\n       of this license
        document, but changing it is not allowed.\n\n[This is the first released version
        of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public
        License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n
        \ The licenses for most software are designed to take away your\nfreedom to
        share and change it.  By contrast, the GNU General Public\nLicenses are intended
        to guarantee your freedom to share and change\nfree software--to make sure
        the software is free for all its users.\n\n  This license, the Lesser General
        Public License, applies to some\nspecially designated software packages--typically
        libraries--of the\nFree Software Foundation and other authors who decide to
        use it.  You\ncan use it too, but we suggest you first think carefully about
        whether\nthis license or the ordinary General Public License is the better\nstrategy
        to use in any particular case, based on the explanations below.\n\n  When
        we speak of free software, we are referring to freedom of use,\nnot price.
        \ Our General Public Licenses are designed to make sure that\nyou have the
        freedom to distribute copies of free software (and charge\nfor this service
        if you wish); that you receive source code or can get\nit if you want it;
        that you can change the software and use pieces of\nit in new free programs;
        and that you are informed that you can do\nthese things.\n\n  To protect your
        rights, we need to make restrictions that forbid\ndistributors to deny you
        these rights or to ask you to surrender these\nrights.  These restrictions
        translate to certain responsibilities for\nyou if you distribute copies of
        the library or if you modify it.\n\n  For example, if you distribute copies
        of the library, whether gratis\nor for a fee, you must give the recipients
        all the rights that we gave\nyou.  You must make sure that they, too, receive
        or can get the source\ncode.  If you link other code with the library, you
        must provide\ncomplete object files to the recipients, so that they can relink
        them\nwith the library after making changes to the library and recompiling\nit.
        \ And you must show them these terms so they know their rights.\n\n  We protect
        your rights with a two-step method: (1) we copyright the\nlibrary, and (2)
        we offer you this license, which gives you legal\npermission to copy, distribute
        and/or modify the library.\n\n  To protect each distributor, we want to make
        it very clear that\nthere is no warranty for the free library.  Also, if the
        library is\nmodified by someone else and passed on, the recipients should
        know\nthat what they have is not the original version, so that the original\nauthor's
        reputation will not be affected by problems that might be\nintroduced by others.\n\n
        \ Finally, software patents pose a constant threat to the existence of\nany
        free program.  We wish to make sure that a company cannot\neffectively restrict
        the users of a free program by obtaining a\nrestrictive license from a patent
        holder.  Therefore, we insist that\nany patent license obtained for a version
        of the library must be\nconsistent with the full freedom of use specified
        in this license.\n\n  Most GNU software, including some libraries, is covered
        by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral
        Public License, applies to certain designated libraries, and\nis quite different
        from the ordinary General Public License.  We use\nthis license for certain
        libraries in order to permit linking those\nlibraries into non-free programs.\n\n
        \ When a program is linked with a library, whether statically or using\na
        shared library, the combination of the two is legally speaking a\ncombined
        work, a derivative of the original library.  The ordinary\nGeneral Public
        License therefore permits such linking only if the\nentire combination fits
        its criteria of freedom.  The Lesser General\nPublic License permits more
        lax criteria for linking other code with\nthe library.\n\n  We call this license
        the \"Lesser\" General Public License because it\ndoes Less to protect the
        user's freedom than the ordinary General\nPublic License.  It also provides
        other free software developers Less\nof an advantage over competing non-free
        programs.  These disadvantages\nare the reason we use the ordinary General
        Public License for many\nlibraries.  However, the Lesser license provides
        advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions,
        there may be a special need to\nencourage the widest possible use of a certain
        library, so that it becomes\na de-facto standard.  To achieve this, non-free
        programs must be\nallowed to use the library.  A more frequent case is that
        a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase,
        there is little to gain by limiting the free library to free\nsoftware only,
        so we use the Lesser General Public License.\n\n  In other cases, permission
        to use a particular library in non-free\nprograms enables a greater number
        of people to use a large body of\nfree software.  For example, permission
        to use the GNU C Library in\nnon-free programs enables many more people to
        use the whole GNU\noperating system, as well as its variant, the GNU/Linux
        operating\nsystem.\n\n  Although the Lesser General Public License is Less
        protective of the\nusers' freedom, it does ensure that the user of a program
        that is\nlinked with the Library has the freedom and the wherewithal to run\nthat
        program using a modified version of the Library.\n\n  The precise terms and
        conditions for copying, distribution and\nmodification follow.  Pay close
        attention to the difference between a\n\"work based on the library\" and a
        \"work that uses the library\".  The\nformer contains code derived from the
        library, whereas the latter must\nbe combined with the library in order to
        run.\n\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND
        CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License
        Agreement applies to any software library or other\nprogram which contains
        a notice placed by the copyright holder or\nother authorized party saying
        it may be distributed under the terms of\nthis Lesser General Public License
        (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n
        \ A \"library\" means a collection of software functions and/or data\nprepared
        so as to be conveniently linked with application programs\n(which use some
        of those functions and data) to form executables.\n\n  The \"Library\", below,
        refers to any such software library or work\nwhich has been distributed under
        these terms.  A \"work based on the\nLibrary\" means either the Library or
        any derivative work under\ncopyright law: that is to say, a work containing
        the Library or a\nportion of it, either verbatim or with modifications and/or
        translated\nstraightforwardly into another language.  (Hereinafter, translation
        is\nincluded without limitation in the term \"modification\".)\n\n  \"Source
        code\" for a work means the preferred form of the work for\nmaking modifications
        to it.  For a library, complete source code means\nall the source code for
        all modules it contains, plus any associated\ninterface definition files,
        plus the scripts used to control compilation\nand installation of the library.\n\n
        \ Activities other than copying, distribution and modification are not\ncovered
        by this License; they are outside its scope.  The act of\nrunning a program
        using the Library is not restricted, and output from\nsuch a program is covered
        only if its contents constitute a work based\non the Library (independent
        of the use of the Library in a tool for\nwriting it).  Whether that is true
        depends on what the Library does\nand what the program that uses the Library
        does.\n  \n  1. You may copy and distribute verbatim copies of the Library's\ncomplete
        source code as you receive it, in any medium, provided that\nyou conspicuously
        and appropriately publish on each copy an\nappropriate copyright notice and
        disclaimer of warranty; keep intact\nall the notices that refer to this License
        and to the absence of any\nwarranty; and distribute a copy of this License
        along with the\nLibrary.\n\n  You may charge a fee for the physical act of
        transferring a copy,\nand you may at your option offer warranty protection
        in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the
        Library or any portion\nof it, thus forming a work based on the Library, and
        copy and\ndistribute such modifications or work under the terms of Section
        1\nabove, provided that you also meet all of these conditions:\n\n    a) The
        modified work must itself be a software library.\n\n    b) You must cause
        the files modified to carry prominent notices\n    stating that you changed
        the files and the date of any change.\n\n    c) You must cause the whole of
        the work to be licensed at no\n    charge to all third parties under the terms
        of this License.\n\n    d) If a facility in the modified Library refers to
        a function or a\n    table of data to be supplied by an application program
        that uses\n    the facility, other than as an argument passed when the facility\n
        \   is invoked, then you must make a good faith effort to ensure that,\n    in
        the event an application does not supply such function or\n    table, the
        facility still operates, and performs whatever part of\n    its purpose remains
        meaningful.\n\n    (For example, a function in a library to compute square
        roots has\n    a purpose that is entirely well-defined independent of the\n
        \   application.  Therefore, Subsection 2d requires that any\n    application-supplied
        function or table used by this function must\n    be optional: if the application
        does not supply it, the square\n    root function must still compute square
        roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable
        sections of that work are not derived from the Library,\nand can be reasonably
        considered independent and separate works in\nthemselves, then this License,
        and its terms, do not apply to those\nsections when you distribute them as
        separate works.  But when you\ndistribute the same sections as part of a whole
        which is a work based\non the Library, the distribution of the whole must
        be on the terms of\nthis License, whose permissions for other licensees extend
        to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus,
        it is not the intent of this section to claim rights or contest\nyour rights
        to work written entirely by you; rather, the intent is to\nexercise the right
        to control the distribution of derivative or\ncollective works based on the
        Library.\n\nIn addition, mere aggregation of another work not based on the
        Library\nwith the Library (or with a work based on the Library) on a volume
        of\na storage or distribution medium does not bring the other work under\nthe
        scope of this License.\n\n  3. You may opt to apply the terms of the ordinary
        GNU General Public\nLicense instead of this License to a given copy of the
        Library.  To do\nthis, you must alter all the notices that refer to this License,
        so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead
        of to this License.  (If a newer version than version 2 of the\nordinary GNU
        General Public License has appeared, then you can specify\nthat version instead
        if you wish.)  Do not make any other change in\nthese notices.\n\n  Once this
        change is made in a given copy, it is irreversible for\nthat copy, so the
        ordinary GNU General Public License applies to all\nsubsequent copies and
        derivative works made from that copy.\n\n  This option is useful when you
        wish to copy part of the code of\nthe Library into a program that is not a
        library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative
        of it, under Section 2) in object code or executable form\nunder the terms
        of Sections 1 and 2 above provided that you accompany\nit with the complete
        corresponding machine-readable source code, which\nmust be distributed under
        the terms of Sections 1 and 2 above on a\nmedium customarily used for software
        interchange.\n\n  If distribution of object code is made by offering access
        to copy\nfrom a designated place, then offering equivalent access to copy
        the\nsource code from the same place satisfies the requirement to\ndistribute
        the source code, even though third parties are not\ncompelled to copy the
        source along with the object code.\n\n  5. A program that contains no derivative
        of any portion of the\nLibrary, but is designed to work with the Library by
        being compiled or\nlinked with it, is called a \"work that uses the Library\".
        \ Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore
        falls outside the scope of this License.\n\n  However, linking a \"work that
        uses the Library\" with the Library\ncreates an executable that is a derivative
        of the Library (because it\ncontains portions of the Library), rather than
        a \"work that uses the\nlibrary\".  The executable is therefore covered by
        this License.\nSection 6 states terms for distribution of such executables.\n\n
        \ When a \"work that uses the Library\" uses material from a header file\nthat
        is part of the Library, the object code for the work may be a\nderivative
        work of the Library even though the source code is not.\nWhether this is true
        is especially significant if the work can be\nlinked without the Library,
        or if the work is itself a library.  The\nthreshold for this to be true is
        not precisely defined by law.\n\n  If such an object file uses only numerical
        parameters, data\nstructure layouts and accessors, and small macros and small
        inline\nfunctions (ten lines or less in length), then the use of the object\nfile
        is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables
        containing this object code plus portions of the\nLibrary will still fall
        under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library,
        you may\ndistribute the object code for the work under the terms of Section
        6.\nAny executables containing that work also fall under Section 6,\nwhether
        or not they are linked directly with the Library itself.\n\n  6. As an exception
        to the Sections above, you may also combine or\nlink a \"work that uses the
        Library\" with the Library to produce a\nwork containing portions of the Library,
        and distribute that work\nunder terms of your choice, provided that the terms
        permit\nmodification of the work for the customer's own use and reverse\nengineering
        for debugging such modifications.\n\n  You must give prominent notice with
        each copy of the work that the\nLibrary is used in it and that the Library
        and its use are covered by\nthis License.  You must supply a copy of this
        License.  If the work\nduring execution displays copyright notices, you must
        include the\ncopyright notice for the Library among them, as well as a reference\ndirecting
        the user to the copy of this License.  Also, you must do one\nof these things:\n\n
        \   a) Accompany the work with the complete corresponding\n    machine-readable
        source code for the Library including whatever\n    changes were used in the
        work (which must be distributed under\n    Sections 1 and 2 above); and, if
        the work is an executable linked\n    with the Library, with the complete
        machine-readable \"work that\n    uses the Library\", as object code and/or
        source code, so that the\n    user can modify the Library and then relink
        to produce a modified\n    executable containing the modified Library.  (It
        is understood\n    that the user who changes the contents of definitions files
        in the\n    Library will not necessarily be able to recompile the application\n
        \   to use the modified definitions.)\n\n    b) Use a suitable shared library
        mechanism for linking with the\n    Library.  A suitable mechanism is one
        that (1) uses at run time a\n    copy of the library already present on the
        user's computer system,\n    rather than copying library functions into the
        executable, and (2)\n    will operate properly with a modified version of
        the library, if\n    the user installs one, as long as the modified version
        is\n    interface-compatible with the version that the work was made with.\n\n
        \   c) Accompany the work with a written offer, valid for at\n    least three
        years, to give the same user the materials\n    specified in Subsection 6a,
        above, for a charge no more\n    than the cost of performing this distribution.\n\n
        \   d) If distribution of the work is made by offering access to copy\n    from
        a designated place, offer equivalent access to copy the above\n    specified
        materials from the same place.\n\n    e) Verify that the user has already
        received a copy of these\n    materials or that you have already sent this
        user a copy.\n\n  For an executable, the required form of the \"work that
        uses the\nLibrary\" must include any data and utility programs needed for\nreproducing
        the executable from it.  However, as a special exception,\nthe materials to
        be distributed need not include anything that is\nnormally distributed (in
        either source or binary form) with the major\ncomponents (compiler, kernel,
        and so on) of the operating system on\nwhich the executable runs, unless that
        component itself accompanies\nthe executable.\n\n  It may happen that this
        requirement contradicts the license\nrestrictions of other proprietary libraries
        that do not normally\naccompany the operating system.  Such a contradiction
        means you cannot\nuse both them and the Library together in an executable
        that you\ndistribute.\n\n  7. You may place library facilities that are a
        work based on the\nLibrary side-by-side in a single library together with
        other library\nfacilities not covered by this License, and distribute such
        a combined\nlibrary, provided that the separate distribution of the work based
        on\nthe Library and of the other library facilities is otherwise\npermitted,
        and provided that you do these two things:\n\n    a) Accompany the combined
        library with a copy of the same work\n    based on the Library, uncombined
        with any other library\n    facilities.  This must be distributed under the
        terms of the\n    Sections above.\n\n    b) Give prominent notice with the
        combined library of the fact\n    that part of it is a work based on the Library,
        and explaining\n    where to find the accompanying uncombined form of the
        same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe
        Library except as expressly provided under this License.  Any\nattempt otherwise
        to copy, modify, sublicense, link with, or\ndistribute the Library is void,
        and will automatically terminate your\nrights under this License.  However,
        parties who have received copies,\nor rights, from you under this License
        will not have their licenses\nterminated so long as such parties remain in
        full compliance.\n\n  9. You are not required to accept this License, since
        you have not\nsigned it.  However, nothing else grants you permission to modify
        or\ndistribute the Library or its derivative works.  These actions are\nprohibited
        by law if you do not accept this License.  Therefore, by\nmodifying or distributing
        the Library (or any work based on the\nLibrary), you indicate your acceptance
        of this License to do so, and\nall its terms and conditions for copying, distributing
        or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute
        the Library (or any work based on the\nLibrary), the recipient automatically
        receives a license from the\noriginal licensor to copy, distribute, link with
        or modify the Library\nsubject to these terms and conditions.  You may not
        impose any further\nrestrictions on the recipients' exercise of the rights
        granted herein.\nYou are not responsible for enforcing compliance by third
        parties with\nthis License.\n\n  11. If, as a consequence of a court judgment
        or allegation of patent\ninfringement or for any other reason (not limited
        to patent issues),\nconditions are imposed on you (whether by court order,
        agreement or\notherwise) that contradict the conditions of this License, they
        do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute
        so as to satisfy simultaneously your obligations under this\nLicense and any
        other pertinent obligations, then as a consequence you\nmay not distribute
        the Library at all.  For example, if a patent\nlicense would not permit royalty-free
        redistribution of the Library by\nall those who receive copies directly or
        indirectly through you, then\nthe only way you could satisfy both it and this
        License would be to\nrefrain entirely from distribution of the Library.\n\nIf
        any portion of this section is held invalid or unenforceable under any\nparticular
        circumstance, the balance of the section is intended to apply,\nand the section
        as a whole is intended to apply in other circumstances.\n\nIt is not the purpose
        of this section to induce you to infringe any\npatents or other property right
        claims or to contest validity of any\nsuch claims; this section has the sole
        purpose of protecting the\nintegrity of the free software distribution system
        which is\nimplemented by public license practices.  Many people have made\ngenerous
        contributions to the wide range of software distributed\nthrough that system
        in reliance on consistent application of that\nsystem; it is up to the author/donor
        to decide if he or she is willing\nto distribute software through any other
        system and a licensee cannot\nimpose that choice.\n\nThis section is intended
        to make thoroughly clear what is believed to\nbe a consequence of the rest
        of this License.\n\n  12. If the distribution and/or use of the Library is
        restricted in\ncertain countries either by patents or by copyrighted interfaces,
        the\noriginal copyright holder who places the Library under this License may
        add\nan explicit geographical distribution limitation excluding those countries,\nso
        that distribution is permitted only in or among countries not thus\nexcluded.
        \ In such case, this License incorporates the limitation as if\nwritten in
        the body of this License.\n\n  13. The Free Software Foundation may publish
        revised and/or new\nversions of the Lesser General Public License from time
        to time.\nSuch new versions will be similar in spirit to the present version,\nbut
        may differ in detail to address new problems or concerns.\n\nEach version
        is given a distinguishing version number.  If the Library\nspecifies a version
        number of this License which applies to it and\n\"any later version\", you
        have the option of following the terms and\nconditions either of that version
        or of any later version published by\nthe Free Software Foundation.  If the
        Library does not specify a\nlicense version number, you may choose any version
        ever published by\nthe Free Software Foundation.\n\n  14. If you wish to incorporate
        parts of the Library into other free\nprograms whose distribution conditions
        are incompatible with these,\nwrite to the author to ask for permission.  For
        software which is\ncopyrighted by the Free Software Foundation, write to the
        Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision
        will be guided by the two goals of preserving the free status\nof all derivatives
        of our free software and of promoting the sharing\nand reuse of software generally.\n\n
        \                           NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED
        FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED
        BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
        HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY
        OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
        THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.
        \ THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH
        YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY
        SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE
        LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY
        WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE
        TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL
        DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING
        BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES
        SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE
        WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED
        OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS
        AND CONDITIONS\n\n"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:36 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Microsoft.Build.Artifacts/2.0.1/Microsoft.Build.Artifacts.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEyLzA2L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGE+DQogICAgPGlkPk1pY3Jvc29mdC5CdWlsZC5BcnRpZmFjdHM8L2lkPg0KICAgIDx2ZXJzaW9uPjIuMC4xPC92ZXJzaW9uPg0KICAgIDxhdXRob3JzPk1pY3Jvc29mdDwvYXV0aG9ycz4NCiAgICA8b3duZXJzPk1pY3Jvc29mdDwvb3duZXJzPg0KICAgIDxkZXZlbG9wbWVudERlcGVuZGVuY3k+dHJ1ZTwvZGV2ZWxvcG1lbnREZXBlbmRlbmN5Pg0KICAgIDxyZXF1aXJlTGljZW5zZUFjY2VwdGFuY2U+ZmFsc2U8L3JlcXVpcmVMaWNlbnNlQWNjZXB0YW5jZT4NCiAgICA8bGljZW5zZSB0eXBlPSJleHByZXNzaW9uIj5NSVQ8L2xpY2Vuc2U+DQogICAgPGxpY2Vuc2VVcmw+aHR0cHM6Ly9saWNlbnNlcy5udWdldC5vcmcvTUlUPC9saWNlbnNlVXJsPg0KICAgIDxwcm9qZWN0VXJsPmh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvTVNCdWlsZFNka3M8L3Byb2plY3RVcmw+DQogICAgPGljb25Vcmw+aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9tc2J1aWxkL3Jhdy9tYXN0ZXIvYnJhbmRpbmcvTVNCdWlsZC1OdUdldC1JY29uLnBuZzwvaWNvblVybD4NCiAgICA8ZGVzY3JpcHRpb24+UGFja2FnZSBEZXNjcmlwdGlvbjwvZGVzY3JpcHRpb24+DQogICAgPGNvcHlyaWdodD7CqSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuPC9jb3B5cmlnaHQ+DQogICAgPHJlcG9zaXRvcnkgdXJsPSJodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L01TQnVpbGRTZGtzLmdpdCIgLz4NCiAgICA8ZGVwZW5kZW5jaWVzPg0KICAgICAgPGdyb3VwIHRhcmdldEZyYW1ld29yaz0iLk5FVEZyYW1ld29yazQuNiIgLz4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRGcmFtZXdvcms0LjcuMiIgLz4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRDb3JlQXBwMi4xIiAvPg0KICAgIDwvZGVwZW5kZW5jaWVzPg0KICA8L21ldGFkYXRhPg0KPC9wYWNrYWdlPg==
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:37 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Microsoft.NETFramework.ReferenceAssemblies/1.0.0/Microsoft.NETFramework.ReferenceAssemblies.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    headers:
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEzLzA1L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGE+DQogICAgPGlkPk1pY3Jvc29mdC5ORVRGcmFtZXdvcmsuUmVmZXJlbmNlQXNzZW1ibGllczwvaWQ+DQogICAgPHZlcnNpb24+MS4wLjA8L3ZlcnNpb24+DQogICAgPGF1dGhvcnM+TWljcm9zb2Z0PC9hdXRob3JzPg0KICAgIDxvd25lcnM+TWljcm9zb2Z0PC9vd25lcnM+DQogICAgPHJlcXVpcmVMaWNlbnNlQWNjZXB0YW5jZT5mYWxzZTwvcmVxdWlyZUxpY2Vuc2VBY2NlcHRhbmNlPg0KICAgIDxkZXZlbG9wbWVudERlcGVuZGVuY3k+dHJ1ZTwvZGV2ZWxvcG1lbnREZXBlbmRlbmN5Pg0KICAgIDxsaWNlbnNlVXJsPmh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvZG90bmV0L2Jsb2IvbWFzdGVyL0xJQ0VOU0U8L2xpY2Vuc2VVcmw+DQogICAgPHByb2plY3RVcmw+aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9kb3RuZXQvdHJlZS9tYXN0ZXIvcmVsZWFzZXMvcmVmZXJlbmNlLWFzc2VtYmxpZXM8L3Byb2plY3RVcmw+DQogICAgPGljb25Vcmw+aHR0cDovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9Mjg4ODU5PC9pY29uVXJsPg0KICAgIDxkZXNjcmlwdGlvbj5NaWNyb3NvZnQgLk5FVCBGcmFtZXdvcmsgUmVmZXJlbmNlIEFzc2VtYmxpZXM8L2Rlc2NyaXB0aW9uPg0KICAgIDxjb3B5cmlnaHQ+wqkgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLjwvY29weXJpZ2h0Pg0KICAgIDxkZXBlbmRlbmNpZXM+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrMi4wIj4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9Ik1pY3Jvc29mdC5ORVRGcmFtZXdvcmsuUmVmZXJlbmNlQXNzZW1ibGllcy5uZXQyMCIgdmVyc2lvbj0iMS4wLjAiIGluY2x1ZGU9IlJ1bnRpbWUsQ29tcGlsZSxCdWlsZCxOYXRpdmUsQ29udGVudEZpbGVzIiAvPg0KICAgICAgPC9ncm91cD4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRGcmFtZXdvcms0LjAiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iTWljcm9zb2Z0Lk5FVEZyYW1ld29yay5SZWZlcmVuY2VBc3NlbWJsaWVzLm5ldDQwIiB2ZXJzaW9uPSIxLjAuMCIgaW5jbHVkZT0iUnVudGltZSxDb21waWxlLEJ1aWxkLE5hdGl2ZSxDb250ZW50RmlsZXMiIC8+DQogICAgICA8L2dyb3VwPg0KICAgICAgPGdyb3VwIHRhcmdldEZyYW1ld29yaz0iLk5FVEZyYW1ld29yazQuNSI+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuTkVURnJhbWV3b3JrLlJlZmVyZW5jZUFzc2VtYmxpZXMubmV0NDUiIHZlcnNpb249IjEuMC4wIiBpbmNsdWRlPSJSdW50aW1lLENvbXBpbGUsQnVpbGQsTmF0aXZlLENvbnRlbnRGaWxlcyIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC41LjEiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iTWljcm9zb2Z0Lk5FVEZyYW1ld29yay5SZWZlcmVuY2VBc3NlbWJsaWVzLm5ldDQ1MSIgdmVyc2lvbj0iMS4wLjAiIGluY2x1ZGU9IlJ1bnRpbWUsQ29tcGlsZSxCdWlsZCxOYXRpdmUsQ29udGVudEZpbGVzIiAvPg0KICAgICAgPC9ncm91cD4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRGcmFtZXdvcms0LjUuMiI+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuTkVURnJhbWV3b3JrLlJlZmVyZW5jZUFzc2VtYmxpZXMubmV0NDUyIiB2ZXJzaW9uPSIxLjAuMCIgaW5jbHVkZT0iUnVudGltZSxDb21waWxlLEJ1aWxkLE5hdGl2ZSxDb250ZW50RmlsZXMiIC8+DQogICAgICA8L2dyb3VwPg0KICAgICAgPGdyb3VwIHRhcmdldEZyYW1ld29yaz0iLk5FVEZyYW1ld29yazQuNiI+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuTkVURnJhbWV3b3JrLlJlZmVyZW5jZUFzc2VtYmxpZXMubmV0NDYiIHZlcnNpb249IjEuMC4wIiBpbmNsdWRlPSJSdW50aW1lLENvbXBpbGUsQnVpbGQsTmF0aXZlLENvbnRlbnRGaWxlcyIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC42LjEiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iTWljcm9zb2Z0Lk5FVEZyYW1ld29yay5SZWZlcmVuY2VBc3NlbWJsaWVzLm5ldDQ2MSIgdmVyc2lvbj0iMS4wLjAiIGluY2x1ZGU9IlJ1bnRpbWUsQ29tcGlsZSxCdWlsZCxOYXRpdmUsQ29udGVudEZpbGVzIiAvPg0KICAgICAgPC9ncm91cD4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRGcmFtZXdvcms0LjYuMiI+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuTkVURnJhbWV3b3JrLlJlZmVyZW5jZUFzc2VtYmxpZXMubmV0NDYyIiB2ZXJzaW9uPSIxLjAuMCIgaW5jbHVkZT0iUnVudGltZSxDb21waWxlLEJ1aWxkLE5hdGl2ZSxDb250ZW50RmlsZXMiIC8+DQogICAgICA8L2dyb3VwPg0KICAgICAgPGdyb3VwIHRhcmdldEZyYW1ld29yaz0iLk5FVEZyYW1ld29yazQuNyI+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuTkVURnJhbWV3b3JrLlJlZmVyZW5jZUFzc2VtYmxpZXMubmV0NDciIHZlcnNpb249IjEuMC4wIiBpbmNsdWRlPSJSdW50aW1lLENvbXBpbGUsQnVpbGQsTmF0aXZlLENvbnRlbnRGaWxlcyIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC43LjEiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iTWljcm9zb2Z0Lk5FVEZyYW1ld29yay5SZWZlcmVuY2VBc3NlbWJsaWVzLm5ldDQ3MSIgdmVyc2lvbj0iMS4wLjAiIGluY2x1ZGU9IlJ1bnRpbWUsQ29tcGlsZSxCdWlsZCxOYXRpdmUsQ29udGVudEZpbGVzIiAvPg0KICAgICAgPC9ncm91cD4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRGcmFtZXdvcms0LjcuMiI+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuTkVURnJhbWV3b3JrLlJlZmVyZW5jZUFzc2VtYmxpZXMubmV0NDcyIiB2ZXJzaW9uPSIxLjAuMCIgaW5jbHVkZT0iUnVudGltZSxDb21waWxlLEJ1aWxkLE5hdGl2ZSxDb250ZW50RmlsZXMiIC8+DQogICAgICA8L2dyb3VwPg0KICAgICAgPGdyb3VwIHRhcmdldEZyYW1ld29yaz0iLk5FVEZyYW1ld29yazQuOCI+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuTkVURnJhbWV3b3JrLlJlZmVyZW5jZUFzc2VtYmxpZXMubmV0NDgiIHZlcnNpb249IjEuMC4wIiBpbmNsdWRlPSJSdW50aW1lLENvbXBpbGUsQnVpbGQsTmF0aXZlLENvbnRlbnRGaWxlcyIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgPC9kZXBlbmRlbmNpZXM+DQogIDwvbWV0YWRhdGE+DQo8L3BhY2thZ2U+
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:37 GMT
- request:
    method: get
    uri: https://github.com/Microsoft/dotnet/blob/master/LICENSE
    headers:
      Host:
      - github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:38 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Nerdbank.GitVersioning/3.0.28/Nerdbank.GitVersioning.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\r\n
        \ <metadata>\r\n    <id>Nerdbank.GitVersioning</id>\r\n    <version>3.0.28</version>\r\n
        \   <title>Nerdbank.GitVersioning</title>\r\n    <authors>Andrew Arnott</authors>\r\n
        \   <owners>aarnott</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n
        \   <developmentDependency>true</developmentDependency>\r\n    <license type=\"expression\">MIT</license>\r\n
        \   <licenseUrl>https://licenses.nuget.org/MIT</licenseUrl>\r\n    <projectUrl>https://github.com/aarnott/Nerdbank.GitVersioning</projectUrl>\r\n
        \   <description>Stamps your assemblies with semver 2.0 compliant git commit
        specific version information and provides NuGet versioning information as
        well.</description>\r\n    <releaseNotes>IMPORTANT: The 3.x release may produce
        a different version height than prior major versions.\r\nSee https://github.com/AArnott/Nerdbank.GitVersioning/releases
        for details.</releaseNotes>\r\n    <tags>git commit versioning version assemblyinfo</tags>\r\n
        \   <repository type=\"git\" url=\"https://github.com/AArnott/Nerdbank.GitVersioning.git\"
        commit=\"732bfc11352f4b6a7124decfc6e0fe1e0eb9c863\" />\r\n  </metadata>\r\n</package>"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:38 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/SlnGen/2.2.30/SlnGen.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEyLzA2L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGE+DQogICAgPGlkPlNsbkdlbjwvaWQ+DQogICAgPHZlcnNpb24+Mi4yLjMwPC92ZXJzaW9uPg0KICAgIDxhdXRob3JzPmplZmZrbCxhbXJoPC9hdXRob3JzPg0KICAgIDxvd25lcnM+amVmZmtsLGFtcmg8L293bmVycz4NCiAgICA8ZGV2ZWxvcG1lbnREZXBlbmRlbmN5PnRydWU8L2RldmVsb3BtZW50RGVwZW5kZW5jeT4NCiAgICA8cmVxdWlyZUxpY2Vuc2VBY2NlcHRhbmNlPmZhbHNlPC9yZXF1aXJlTGljZW5zZUFjY2VwdGFuY2U+DQogICAgPGxpY2Vuc2UgdHlwZT0iZXhwcmVzc2lvbiI+TUlUPC9saWNlbnNlPg0KICAgIDxsaWNlbnNlVXJsPmh0dHBzOi8vbGljZW5zZXMubnVnZXQub3JnL01JVDwvbGljZW5zZVVybD4NCiAgICA8cHJvamVjdFVybD5odHRwczovL2dpdGh1Yi5jb20vamVmZmtsL1NsbkdlbjwvcHJvamVjdFVybD4NCiAgICA8ZGVzY3JpcHRpb24+TVNCdWlsZC1iYXNlZCBWaXN1YWwgU3R1ZGlvIHNvbHV0aW9uIGZpbGUgZ2VuZXJhdG9yPC9kZXNjcmlwdGlvbj4NCiAgICA8Y29weXJpZ2h0PkNvcHlyaWdodCDCqSAgMjAxNy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuPC9jb3B5cmlnaHQ+DQogICAgPHRhZ3M+bXNidWlsZCB2aXN1YWxzdHVkaW8gc29sdXRpb248L3RhZ3M+DQogICAgPHJlcG9zaXRvcnkgdXJsPSJodHRwczovL2dpdGh1Yi5jb20vamVmZmtsL1Nsbkdlbi5naXQiIC8+DQogICAgPGRlcGVuZGVuY2llcz4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRGcmFtZXdvcms0LjUiIC8+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC42IiAvPg0KICAgICAgPGdyb3VwIHRhcmdldEZyYW1ld29yaz0iLk5FVEZyYW1ld29yazQuNy4yIiAvPg0KICAgICAgPGdyb3VwIHRhcmdldEZyYW1ld29yaz0iLk5FVENvcmVBcHAyLjEiIC8+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVUU3RhbmRhcmQyLjAiIC8+DQogICAgPC9kZXBlbmRlbmNpZXM+DQogIDwvbWV0YWRhdGE+DQo8L3BhY2thZ2U+
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:39 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/StyleCop.Analyzers/1.1.118/StyleCop.Analyzers.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/01/nuspec.xsd\">\r\n
        \ <metadata minClientVersion=\"2.7\">\r\n    <id>StyleCop.Analyzers</id>\r\n
        \   <version>1.1.118</version>\r\n    <title>StyleCop.Analyzers</title>\r\n
        \   <authors>Sam Harwell et. al.</authors>\r\n    <owners>Sam Harwell</owners>\r\n
        \   <developmentDependency>true</developmentDependency>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n
        \   <license type=\"expression\">Apache-2.0</license>\r\n    <licenseUrl>https://licenses.nuget.org/Apache-2.0</licenseUrl>\r\n
        \   <projectUrl>https://github.com/DotNetAnalyzers/StyleCopAnalyzers</projectUrl>\r\n
        \   <description>An implementation of StyleCop's rules using Roslyn analyzers
        and code fixes</description>\r\n    <releaseNotes>https://github.com/DotNetAnalyzers/StyleCopAnalyzers/releases/1.1.118</releaseNotes>\r\n
        \   <copyright>Copyright 2015 Tunnel Vision Laboratories, LLC</copyright>\r\n
        \   <tags>StyleCop DotNetAnalyzers Roslyn Diagnostic Analyzer</tags>\r\n  </metadata>\r\n</package>"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:39 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/McMaster.Extensions.CommandLineUtils/2.5.0/McMaster.Extensions.CommandLineUtils.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEzLzA1L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGE+DQogICAgPGlkPk1jTWFzdGVyLkV4dGVuc2lvbnMuQ29tbWFuZExpbmVVdGlsczwvaWQ+DQogICAgPHZlcnNpb24+Mi41LjA8L3ZlcnNpb24+DQogICAgPGF1dGhvcnM+TmF0ZSBNY01hc3RlcjwvYXV0aG9ycz4NCiAgICA8b3duZXJzPk5hdGUgTWNNYXN0ZXI8L293bmVycz4NCiAgICA8cmVxdWlyZUxpY2Vuc2VBY2NlcHRhbmNlPmZhbHNlPC9yZXF1aXJlTGljZW5zZUFjY2VwdGFuY2U+DQogICAgPGxpY2Vuc2UgdHlwZT0iZXhwcmVzc2lvbiI+QXBhY2hlLTIuMDwvbGljZW5zZT4NCiAgICA8bGljZW5zZVVybD5odHRwczovL2xpY2Vuc2VzLm51Z2V0Lm9yZy9BcGFjaGUtMi4wPC9saWNlbnNlVXJsPg0KICAgIDxpY29uPmljb24ucG5nPC9pY29uPg0KICAgIDxwcm9qZWN0VXJsPmh0dHBzOi8vZ2l0aHViLmNvbS9uYXRlbWNtYXN0ZXIvQ29tbWFuZExpbmVVdGlsczwvcHJvamVjdFVybD4NCiAgICA8aWNvblVybD5odHRwczovL25hdGVtY21hc3Rlci5naXRodWIuaW8vQ29tbWFuZExpbmVVdGlscy9sb2dvLnBuZzwvaWNvblVybD4NCiAgICA8ZGVzY3JpcHRpb24+Q29tbWFuZC1saW5lIHBhcnNpbmcgQVBJIGFuZCB1dGlsaXRpZXMgZm9yIGNvbnNvbGUgYXBwbGljYXRpb25zLg0KDQpDb21tb25seSB1c2VkIHR5cGVzOg0KDQpNY01hc3Rlci5FeHRlbnNpb25zLkNvbW1hbmRMaW5lVXRpbHMuQ29tbWFuZExpbmVBcHBsaWNhdGlvbg0KTWNNYXN0ZXIuRXh0ZW5zaW9ucy5Db21tYW5kTGluZVV0aWxzLkNvbW1hbmRPcHRpb24NCk1jTWFzdGVyLkV4dGVuc2lvbnMuQ29tbWFuZExpbmVVdGlscy5JQ29uc29sZQ0KTWNNYXN0ZXIuRXh0ZW5zaW9ucy5Db21tYW5kTGluZVV0aWxzLlByb21wdA0KTWNNYXN0ZXIuRXh0ZW5zaW9ucy5Db21tYW5kTGluZVV0aWxzLkFyZ3VtZW50RXNjYXBlcg0KDQogQSBjb21tdW5pdHktbWFpbnRhaW5lZCBmb3JrIG9mIE1pY3Jvc29mdC5FeHRlbnNpb25zLkNvbW1hbmRMaW5lVXRpbHMsIHBsdXMgbWFueSBlbmhhbmNlbWVudHMuPC9kZXNjcmlwdGlvbj4NCiAgICA8cmVsZWFzZU5vdGVzPkZlYXR1cmVzIGFuZCBidWcgZml4ZXM6DQoNCiogQGtiaWxzdGVkOiBTaG93IGVudW0gbmFtZXMgaW4gaGVscCB0ZXh0IGZvciBPcHRpb25zIGFuZCBBcmd1bWVudHMgc3RvcmVkIGFzIGVudW0NCiogQEFseGFuZHI6IEFkZCBzdXBwb3J0IGZvciBwcml2YXRlIGJhc2UgdHlwZSBvcHRpb25zDQoqIEBBbmRyZUdsZWljaG5lcjogVXBkYXRlIGdlbmVyYXRlZCBoZWxwIHRvIGRpc3BsYXkgW2NvbW1hbmRdIGZpcnN0IHRoZW4gW29wdGlvbnNdDQoqIEBkYXZlTXVlbGxlcjogRml4IGdlbmVyYXRlZCBoZWxwIHRvIGRpc3BsYXkgdGhlIGhlbHAgb3B0aW9ucyBjb3JyZWN0bHkNCiAgICANCg0KU2VlIG1vcmUgZGV0YWlscyBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vbmF0ZW1jbWFzdGVyL0NvbW1hbmRMaW5lVXRpbHMvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kI3YyNTA8L3JlbGVhc2VOb3Rlcz4NCiAgICA8Y29weXJpZ2h0PkNvcHlyaWdodCDCqSBOYXRlIE1jTWFzdGVyPC9jb3B5cmlnaHQ+DQogICAgPHRhZ3M+Y29tbWFuZGxpbmUgcGFyc2luZzwvdGFncz4NCiAgICA8cmVwb3NpdG9yeSB0eXBlPSJnaXQiIHVybD0iaHR0cHM6Ly9naXRodWIuY29tL25hdGVtY21hc3Rlci9Db21tYW5kTGluZVV0aWxzLmdpdCIgY29tbWl0PSI4M2IyOGY0NDBjNjQwMGU2OTllNDE5ZmUwNTI5MmRjZjFmZDYyMjQ5IiAvPg0KICAgIDxkZXBlbmRlbmNpZXM+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC41Ij4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9IlN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5SdW50aW1lSW5mb3JtYXRpb24iIHZlcnNpb249IjQuMy4wIiBleGNsdWRlPSJCdWlsZCxBbmFseXplcnMiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uVmFsdWVUdXBsZSIgdmVyc2lvbj0iNC41LjAiIGV4Y2x1ZGU9IkJ1aWxkLEFuYWx5emVycyIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVUU3RhbmRhcmQxLjYiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLkNvbXBvbmVudE1vZGVsLkFubm90YXRpb25zIiB2ZXJzaW9uPSI0LjEuMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MiIHZlcnNpb249IjQuMS4wIiBleGNsdWRlPSJCdWlsZCxBbmFseXplcnMiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uVGhyZWFkaW5nLlRocmVhZCIgdmVyc2lvbj0iNC4wLjAiIGV4Y2x1ZGU9IkJ1aWxkLEFuYWx5emVycyIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9IlN5c3RlbS5WYWx1ZVR1cGxlIiB2ZXJzaW9uPSI0LjQuMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgPC9ncm91cD4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRTdGFuZGFyZDIuMCI+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uQ29tcG9uZW50TW9kZWwuQW5ub3RhdGlvbnMiIHZlcnNpb249IjQuNy4wIiBleGNsdWRlPSJCdWlsZCxBbmFseXplcnMiIC8+DQogICAgICA8L2dyb3VwPg0KICAgIDwvZGVwZW5kZW5jaWVzPg0KICAgIDxmcmFtZXdvcmtBc3NlbWJsaWVzPg0KICAgICAgPGZyYW1ld29ya0Fzc2VtYmx5IGFzc2VtYmx5TmFtZT0iU3lzdGVtLkNvbXBvbmVudE1vZGVsLkRhdGFBbm5vdGF0aW9ucyIgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC41IiAvPg0KICAgIDwvZnJhbWV3b3JrQXNzZW1ibGllcz4NCiAgPC9tZXRhZGF0YT4NCjwvcGFja2FnZT4=
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:39 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Microsoft.Build/16.4.0/Microsoft.Build.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEzLzA1L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGE+DQogICAgPGlkPk1pY3Jvc29mdC5CdWlsZDwvaWQ+DQogICAgPHZlcnNpb24+MTYuNC4wPC92ZXJzaW9uPg0KICAgIDxhdXRob3JzPk1pY3Jvc29mdDwvYXV0aG9ycz4NCiAgICA8b3duZXJzPk1pY3Jvc29mdDwvb3duZXJzPg0KICAgIDxyZXF1aXJlTGljZW5zZUFjY2VwdGFuY2U+dHJ1ZTwvcmVxdWlyZUxpY2Vuc2VBY2NlcHRhbmNlPg0KICAgIDxsaWNlbnNlIHR5cGU9ImV4cHJlc3Npb24iPk1JVDwvbGljZW5zZT4NCiAgICA8bGljZW5zZVVybD5odHRwczovL2xpY2Vuc2VzLm51Z2V0Lm9yZy9NSVQ8L2xpY2Vuc2VVcmw+DQogICAgPGljb24+TVNCdWlsZC1OdUdldC1JY29uLnBuZzwvaWNvbj4NCiAgICA8cHJvamVjdFVybD5odHRwOi8vZ28ubWljcm9zb2Z0LmNvbS9md2xpbmsvP0xpbmtJZD02MjQ2ODM8L3Byb2plY3RVcmw+DQogICAgPGljb25Vcmw+aHR0cHM6Ly9nby5taWNyb3NvZnQuY29tL2Z3bGluay8/bGlua2lkPTgyNTY5NDwvaWNvblVybD4NCiAgICA8ZGVzY3JpcHRpb24+VGhpcyBwYWNrYWdlIGNvbnRhaW5zIHRoZSBNaWNyb3NvZnQuQnVpbGQgYXNzZW1ibHkgd2hpY2ggaXMgdXNlZCB0byBjcmVhdGUsIGVkaXQsIGFuZCBldmFsdWF0ZSBNU0J1aWxkIHByb2plY3RzLjwvZGVzY3JpcHRpb24+DQogICAgPGNvcHlyaWdodD7CqSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuPC9jb3B5cmlnaHQ+DQogICAgPHRhZ3M+TVNCdWlsZDwvdGFncz4NCiAgICA8c2VydmljZWFibGU+dHJ1ZTwvc2VydmljZWFibGU+DQogICAgPHJlcG9zaXRvcnkgdHlwZT0iZ2l0IiB1cmw9Imh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvbXNidWlsZCIgY29tbWl0PSJlOTAxMDM3ZmUxODE1ZWFlMTc0MjRmODYwNDEyZDBiOTY3ZDA5NDYxIiAvPg0KICAgIDxkZXBlbmRlbmNpZXM+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC43LjIiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iTWljcm9zb2Z0LkJ1aWxkLkZyYW1ld29yayIgdmVyc2lvbj0iMTYuNC4wIiBleGNsdWRlPSJCdWlsZCxBbmFseXplcnMiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlNldHVwLkNvbmZpZ3VyYXRpb24uSW50ZXJvcCIgdmVyc2lvbj0iMS4xNi4zMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLkNvbGxlY3Rpb25zLkltbXV0YWJsZSIgdmVyc2lvbj0iMS41LjAiIGV4Y2x1ZGU9IkJ1aWxkLEFuYWx5emVycyIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9IlN5c3RlbS5NZW1vcnkiIHZlcnNpb249IjQuNS4zIiBleGNsdWRlPSJCdWlsZCxBbmFseXplcnMiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzLkRhdGFmbG93IiB2ZXJzaW9uPSI0LjkuMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgPC9ncm91cD4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRDb3JlQXBwMi4xIj4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9Ik1pY3Jvc29mdC5CdWlsZC5GcmFtZXdvcmsiIHZlcnNpb249IjE2LjQuMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iTWljcm9zb2Z0LldpbjMyLlJlZ2lzdHJ5IiB2ZXJzaW9uPSI0LjMuMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLkNvbGxlY3Rpb25zLkltbXV0YWJsZSIgdmVyc2lvbj0iMS41LjAiIGV4Y2x1ZGU9IkJ1aWxkLEFuYWx5emVycyIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9IlN5c3RlbS5EaWFnbm9zdGljcy5UcmFjZVNvdXJjZSIgdmVyc2lvbj0iNC4wLjAiIGV4Y2x1ZGU9IkJ1aWxkLEFuYWx5emVycyIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9IlN5c3RlbS5NZW1vcnkiIHZlcnNpb249IjQuNS4zIiBleGNsdWRlPSJCdWlsZCxBbmFseXplcnMiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uUmVmbGVjdGlvbi5NZXRhZGF0YSIgdmVyc2lvbj0iMS42LjAiIGV4Y2x1ZGU9IkJ1aWxkLEFuYWx5emVycyIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9IlN5c3RlbS5SZWZsZWN0aW9uLlR5cGVFeHRlbnNpb25zIiB2ZXJzaW9uPSI0LjEuMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlJ1bnRpbWUuTG9hZGVyIiB2ZXJzaW9uPSI0LjAuMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzIiB2ZXJzaW9uPSI0LjMuMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlRleHQuRW5jb2RpbmcuQ29kZVBhZ2VzIiB2ZXJzaW9uPSI0LjAuMSIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlRocmVhZGluZy5UYXNrcy5EYXRhZmxvdyIgdmVyc2lvbj0iNC45LjAiIGV4Y2x1ZGU9IkJ1aWxkLEFuYWx5emVycyIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgPC9kZXBlbmRlbmNpZXM+DQogICAgPGZyYW1ld29ya0Fzc2VtYmxpZXM+DQogICAgICA8ZnJhbWV3b3JrQXNzZW1ibHkgYXNzZW1ibHlOYW1lPSJTeXN0ZW0uQ29uZmlndXJhdGlvbiIgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC43LjIiIC8+DQogICAgICA8ZnJhbWV3b3JrQXNzZW1ibHkgYXNzZW1ibHlOYW1lPSJTeXN0ZW0uSU8uQ29tcHJlc3Npb24iIHRhcmdldEZyYW1ld29yaz0iLk5FVEZyYW1ld29yazQuNy4yIiAvPg0KICAgIDwvZnJhbWV3b3JrQXNzZW1ibGllcz4NCiAgPC9tZXRhZGF0YT4NCjwvcGFja2FnZT4=
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:39 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Microsoft.Build.Locator/1.2.6/Microsoft.Build.Locator.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEyLzA2L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGE+DQogICAgPGlkPk1pY3Jvc29mdC5CdWlsZC5Mb2NhdG9yPC9pZD4NCiAgICA8dmVyc2lvbj4xLjIuNjwvdmVyc2lvbj4NCiAgICA8dGl0bGU+TVNCdWlsZCBMb2NhdG9yPC90aXRsZT4NCiAgICA8YXV0aG9ycz5NaWNyb3NvZnQ8L2F1dGhvcnM+DQogICAgPG93bmVycz5NaWNyb3NvZnQ8L293bmVycz4NCiAgICA8cmVxdWlyZUxpY2Vuc2VBY2NlcHRhbmNlPnRydWU8L3JlcXVpcmVMaWNlbnNlQWNjZXB0YW5jZT4NCiAgICA8bGljZW5zZVVybD5odHRwOi8vZ28ubWljcm9zb2Z0LmNvbS9md2xpbmsvP0xpbmtJZD0zMjk3NzA8L2xpY2Vuc2VVcmw+DQogICAgPHByb2plY3RVcmw+aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9NU0J1aWxkTG9jYXRvcjwvcHJvamVjdFVybD4NCiAgICA8aWNvblVybD5odHRwOi8vZ28ubWljcm9zb2Z0LmNvbS9md2xpbmsvP0xpbmtJRD04MjU2OTQ8L2ljb25Vcmw+DQogICAgPGRlc2NyaXB0aW9uPlBhY2thZ2UgdGhhdCBhc3Npc3RzIGluIGxvY2F0aW5nIGFuZCB1c2luZyBhbiBpbnN0YWxsZWQgdmVyc2lvbiBvZiBNU0J1aWxkIDE1LjwvZGVzY3JpcHRpb24+DQogICAgPGNvcHlyaWdodD7CqSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuPC9jb3B5cmlnaHQ+DQogICAgPGRlcGVuZGVuY2llcz4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRGcmFtZXdvcms0LjYiIC8+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVUQ29yZUFwcDIuMCIgLz4NCiAgICA8L2RlcGVuZGVuY2llcz4NCiAgPC9tZXRhZGF0YT4NCjwvcGFja2FnZT4=
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:40 GMT
- request:
    method: get
    uri: http://go.microsoft.com/fwlink/?LinkId=329770
    headers:
      Host:
      - go.microsoft.com
  response:
    status:
      code: 302
      message: Moved Temporarily
    headers:
      Location:
      - https://www.microsoft.com/net/dotnet_library_license.htm
    body:
      encoding: UTF-8
      string: ''
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:40 GMT
- request:
    method: get
    uri: https://www.microsoft.com/net/dotnet_library_license.htm
    headers:
      Host:
      - www.microsoft.com
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Location:
      - https://dotnet.microsoft.com/dotnet_library_license.htm
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:40 GMT
- request:
    method: get
    uri: https://dotnet.microsoft.com/dotnet_library_license.htm
    headers:
      Host:
      - dotnet.microsoft.com
  response:
    status:
      code: 302
      message: Found
    headers:
      Location:
      - "/en/dotnet_library_license.htm"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:40 GMT
- request:
    method: get
    uri: https://dotnet.microsoft.com/en/dotnet_library_license.htm
    headers:
      Host:
      - dotnet.microsoft.com
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:40 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Microsoft.Build.Runtime/16.4.0/Microsoft.Build.Runtime.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:40 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Microsoft.Build.Utilities.Core/16.4.0/Microsoft.Build.Utilities.Core.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEzLzA1L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGE+DQogICAgPGlkPk1pY3Jvc29mdC5CdWlsZC5VdGlsaXRpZXMuQ29yZTwvaWQ+DQogICAgPHZlcnNpb24+MTYuNC4wPC92ZXJzaW9uPg0KICAgIDxhdXRob3JzPk1pY3Jvc29mdDwvYXV0aG9ycz4NCiAgICA8b3duZXJzPk1pY3Jvc29mdDwvb3duZXJzPg0KICAgIDxyZXF1aXJlTGljZW5zZUFjY2VwdGFuY2U+dHJ1ZTwvcmVxdWlyZUxpY2Vuc2VBY2NlcHRhbmNlPg0KICAgIDxsaWNlbnNlIHR5cGU9ImV4cHJlc3Npb24iPk1JVDwvbGljZW5zZT4NCiAgICA8bGljZW5zZVVybD5odHRwczovL2xpY2Vuc2VzLm51Z2V0Lm9yZy9NSVQ8L2xpY2Vuc2VVcmw+DQogICAgPGljb24+TVNCdWlsZC1OdUdldC1JY29uLnBuZzwvaWNvbj4NCiAgICA8cHJvamVjdFVybD5odHRwOi8vZ28ubWljcm9zb2Z0LmNvbS9md2xpbmsvP0xpbmtJZD02MjQ2ODM8L3Byb2plY3RVcmw+DQogICAgPGljb25Vcmw+aHR0cHM6Ly9nby5taWNyb3NvZnQuY29tL2Z3bGluay8/bGlua2lkPTgyNTY5NDwvaWNvblVybD4NCiAgICA8ZGVzY3JpcHRpb24+VGhpcyBwYWNrYWdlIGNvbnRhaW5zIHRoZSBNaWNyb3NvZnQuQnVpbGQuVXRpbGl0aWVzIGFzc2VtYmx5IHdoaWNoIGlzIHVzZWQgdG8gaW1wbGVtZW50IGN1c3RvbSBNU0J1aWxkIHRhc2tzLjwvZGVzY3JpcHRpb24+DQogICAgPGNvcHlyaWdodD7CqSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuPC9jb3B5cmlnaHQ+DQogICAgPHRhZ3M+TVNCdWlsZDwvdGFncz4NCiAgICA8c2VydmljZWFibGU+dHJ1ZTwvc2VydmljZWFibGU+DQogICAgPHJlcG9zaXRvcnkgdHlwZT0iZ2l0IiB1cmw9Imh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvbXNidWlsZCIgY29tbWl0PSJlOTAxMDM3ZmUxODE1ZWFlMTc0MjRmODYwNDEyZDBiOTY3ZDA5NDYxIiAvPg0KICAgIDxkZXBlbmRlbmNpZXM+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC43LjIiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iTWljcm9zb2Z0LkJ1aWxkLkZyYW1ld29yayIgdmVyc2lvbj0iMTYuNC4wIiBleGNsdWRlPSJCdWlsZCxBbmFseXplcnMiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlNldHVwLkNvbmZpZ3VyYXRpb24uSW50ZXJvcCIgdmVyc2lvbj0iMS4xNi4zMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLkNvbGxlY3Rpb25zLkltbXV0YWJsZSIgdmVyc2lvbj0iMS41LjAiIGV4Y2x1ZGU9IkJ1aWxkLEFuYWx5emVycyIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVUU3RhbmRhcmQyLjAiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iTWljcm9zb2Z0LkJ1aWxkLkZyYW1ld29yayIgdmVyc2lvbj0iMTYuNC4wIiBleGNsdWRlPSJCdWlsZCxBbmFseXplcnMiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJNaWNyb3NvZnQuV2luMzIuUmVnaXN0cnkiIHZlcnNpb249IjQuMy4wIiBleGNsdWRlPSJCdWlsZCxBbmFseXplcnMiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJTeXN0ZW0uQ29sbGVjdGlvbnMuSW1tdXRhYmxlIiB2ZXJzaW9uPSIxLjUuMCIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlRleHQuRW5jb2RpbmcuQ29kZVBhZ2VzIiB2ZXJzaW9uPSI0LjAuMSIgZXhjbHVkZT0iQnVpbGQsQW5hbHl6ZXJzIiAvPg0KICAgICAgPC9ncm91cD4NCiAgICA8L2RlcGVuZGVuY2llcz4NCiAgICA8ZnJhbWV3b3JrQXNzZW1ibGllcz4NCiAgICAgIDxmcmFtZXdvcmtBc3NlbWJseSBhc3NlbWJseU5hbWU9IlN5c3RlbS5Db25maWd1cmF0aW9uIiB0YXJnZXRGcmFtZXdvcms9Ii5ORVRGcmFtZXdvcms0LjcuMiIgLz4NCiAgICA8L2ZyYW1ld29ya0Fzc2VtYmxpZXM+DQogIDwvbWV0YWRhdGE+DQo8L3BhY2thZ2U+
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:41 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Microsoft.NET.Test.Sdk/16.4.0/Microsoft.NET.Test.Sdk.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEzLzA1L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGE+DQogICAgPGlkPk1pY3Jvc29mdC5ORVQuVGVzdC5TZGs8L2lkPg0KICAgIDx2ZXJzaW9uPjE2LjQuMDwvdmVyc2lvbj4NCiAgICA8dGl0bGU+TWljcm9zb2Z0Lk5FVC5UZXN0LlNkazwvdGl0bGU+DQogICAgPGF1dGhvcnM+TWljcm9zb2Z0PC9hdXRob3JzPg0KICAgIDxvd25lcnM+TWljcm9zb2Z0PC9vd25lcnM+DQogICAgPHJlcXVpcmVMaWNlbnNlQWNjZXB0YW5jZT50cnVlPC9yZXF1aXJlTGljZW5zZUFjY2VwdGFuY2U+DQogICAgPGxpY2Vuc2VVcmw+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3dlYi93ZWJwaS9ldWxhL25ldF9saWJyYXJ5X2V1bGFfZW51Lmh0bTwvbGljZW5zZVVybD4NCiAgICA8cHJvamVjdFVybD5odHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzdGVzdC88L3Byb2plY3RVcmw+DQogICAgPGljb25Vcmw+aHR0cDovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9Mjg4ODU5PC9pY29uVXJsPg0KICAgIDxkZXNjcmlwdGlvbj5UaGUgTVNidWlsZCB0YXJnZXRzIGFuZCBwcm9wZXJ0aWVzIGZvciBidWlsZGluZyAuTkVUIHRlc3QgcHJvamVjdHMuPC9kZXNjcmlwdGlvbj4NCiAgICA8Y29weXJpZ2h0PsKpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC48L2NvcHlyaWdodD4NCiAgICA8dGFncz52c3Rlc3QgdmlzdWFsLXN0dWRpbyB1bml0dGVzdCB0ZXN0cGxhdGZvcm0gbXN0ZXN0IG1pY3Jvc29mdCB0ZXN0IHRlc3Rpbmc8L3RhZ3M+DQogICAgPGRlcGVuZGVuY2llcz4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9IlVBUDEwLjAiPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLkNvbXBvbmVudE1vZGVsLlByaW1pdGl2ZXMiIHZlcnNpb249IjQuMS4wIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLkNvbXBvbmVudE1vZGVsLlR5cGVDb252ZXJ0ZXIiIHZlcnNpb249IjQuMS4wIiAvPg0KICAgICAgICA8ZGVwZW5kZW5jeSBpZD0iU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLlJ1bnRpbWVJbmZvcm1hdGlvbiIgdmVyc2lvbj0iNC4wLjAiIC8+DQogICAgICAgIDxkZXBlbmRlbmN5IGlkPSJOZXd0b25zb2Z0Lkpzb24iIHZlcnNpb249IjkuMC4xIiAvPg0KICAgICAgPC9ncm91cD4NCiAgICAgIDxncm91cCB0YXJnZXRGcmFtZXdvcms9Ii5ORVRDb3JlQXBwMi4xIj4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9Ik1pY3Jvc29mdC5UZXN0UGxhdGZvcm0uVGVzdEhvc3QiIHZlcnNpb249IjE2LjQuMCIgLz4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9Ik1pY3Jvc29mdC5Db2RlQ292ZXJhZ2UiIHZlcnNpb249IjE2LjQuMCIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgICA8Z3JvdXAgdGFyZ2V0RnJhbWV3b3JrPSIuTkVURnJhbWV3b3JrNC41Ij4NCiAgICAgICAgPGRlcGVuZGVuY3kgaWQ9Ik1pY3Jvc29mdC5Db2RlQ292ZXJhZ2UiIHZlcnNpb249IjE2LjQuMCIgLz4NCiAgICAgIDwvZ3JvdXA+DQogICAgPC9kZXBlbmRlbmNpZXM+DQogIDwvbWV0YWRhdGE+DQo8L3BhY2thZ2U+
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:41 GMT
- request:
    method: get
    uri: http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm
    headers:
      Host:
      - www.microsoft.com
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:41 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Microsoft.VisualStudio.Telemetry/16.3.2/Microsoft.VisualStudio.Telemetry.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhY2thZ2luZy8yMDEzLzA1L251c3BlYy54c2QiPg0KICA8bWV0YWRhdGE+DQogICAgPGlkPk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGVsZW1ldHJ5PC9pZD4NCiAgICA8dmVyc2lvbj4xNi4zLjI8L3ZlcnNpb24+DQogICAgPHRpdGxlPk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGVsZW1ldHJ5PC90aXRsZT4NCiAgICA8YXV0aG9ycz5NaWNyb3NvZnQ8L2F1dGhvcnM+DQogICAgPG93bmVycz5NaWNyb3NvZnQ8L293bmVycz4NCiAgICA8cmVxdWlyZUxpY2Vuc2VBY2NlcHRhbmNlPmZhbHNlPC9yZXF1aXJlTGljZW5zZUFjY2VwdGFuY2U+DQogICAgPGxpY2Vuc2VVcmw+aHR0cHM6Ly93d3cudmlzdWFsc3R1ZGlvLmNvbS9lbi11cy9zdXBwb3J0L2xlZ2FsL210NzM2NDQyPC9saWNlbnNlVXJsPg0KICAgIDxwcm9qZWN0VXJsPmh0dHA6Ly9ha2EubXMvVnNFeHRlbnNpYmlsaXR5PC9wcm9qZWN0VXJsPg0KICAgIDxpY29uVXJsPmh0dHA6Ly9ha2EubXMvVnNFeHRlbnNpYmlsaXR5SWNvbjwvaWNvblVybD4NCiAgICA8ZGVzY3JpcHRpb24+TWljcm9zb2Z0wq4gVmlzdWFsIFN0dWRpb8KuIFRlbGVtZXRyeSBMaWJyYXJ5PC9kZXNjcmlwdGlvbj4NCiAgICA8Y29weXJpZ2h0PsKpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC48L2NvcHlyaWdodD4NCiAgICA8ZGVwZW5kZW5jaWVzPg0KICAgICAgPGRlcGVuZGVuY3kgaWQ9Ik1pY3Jvc29mdC5EaWFnbm9zdGljcy5UcmFjaW5nLkV2ZW50U291cmNlLlJlZGlzdCIgdmVyc2lvbj0iMS4xLjI4IiAvPg0KICAgICAgPGRlcGVuZGVuY3kgaWQ9Ik1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uUmVtb3RlQ29udHJvbCIgdmVyc2lvbj0iMTQuMS4xMCIgLz4NCiAgICAgIDxkZXBlbmRlbmN5IGlkPSJOZXd0b25zb2Z0Lkpzb24iIHZlcnNpb249IjkuMC4xIiAvPg0KICAgIDwvZGVwZW5kZW5jaWVzPg0KICA8L21ldGFkYXRhPg0KPC9wYWNrYWdlPg==
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:41 GMT
- request:
    method: get
    uri: https://www.visualstudio.com/en-us/support/legal/mt736442
    headers:
      Host:
      - www.visualstudio.com
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Server:
      - AkamaiGHost
      Location:
      - https://visualstudio.microsoft.com/license-terms/mt736442/
    body:
      encoding: UTF-8
      string: ''
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:41 GMT
- request:
    method: get
    uri: https://visualstudio.microsoft.com/license-terms/mt736442/
    headers:
      Host:
      - visualstudio.microsoft.com
  response:
    status:
      code: 200
      message: OK
    headers:
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:42 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/MSBuild.ProjectCreation/1.3.1/MSBuild.ProjectCreation.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n
        \ <metadata>\r\n    <id>MSBuild.ProjectCreation</id>\r\n    <version>1.3.1</version>\r\n
        \   <authors>jeffkl</authors>\r\n    <owners>jeffkl</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n
        \   <license type=\"expression\">MIT</license>\r\n    <licenseUrl>https://licenses.nuget.org/MIT</licenseUrl>\r\n
        \   <projectUrl>https://github.com/jeffkl/MSBuildProjectCreator</projectUrl>\r\n
        \   <description>A fluent interface for generation MSBuild project files.</description>\r\n
        \   <copyright>Copyright (c) Jeff Kluge. All rights reserved.</copyright>\r\n
        \   <tags>MSBuild project creator generator</tags>\r\n    <repository url=\"https://github.com/jeffkl/MSBuildProjectCreator.git\"
        />\r\n    <dependencies>\r\n      <group targetFramework=\".NETFramework4.6\">\r\n
        \       <dependency id=\"Microsoft.Build\" version=\"15.9.20\" exclude=\"Runtime,Build,Analyzers\"
        />\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.10.0\"
        exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.VisualStudio.Setup.Configuration.Interop\"
        version=\"1.16.30\" exclude=\"Build,Analyzers\" />\r\n        <dependency
        id=\"NuGet.Packaging\" version=\"4.9.4\" exclude=\"Build,Analyzers\" />\r\n
        \       <dependency id=\"NuGet.ProjectModel\" version=\"4.9.4\" exclude=\"Build,Analyzers\"
        />\r\n      </group>\r\n      <group targetFramework=\".NETFramework4.7.2\">\r\n
        \       <dependency id=\"Microsoft.Build\" version=\"16.3.0\" exclude=\"Runtime,Build,Analyzers\"
        />\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"3.3.1\"
        exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"Microsoft.VisualStudio.Setup.Configuration.Interop\"
        version=\"1.16.30\" exclude=\"Build,Analyzers\" />\r\n        <dependency
        id=\"NuGet.Packaging\" version=\"5.3.1\" exclude=\"Build,Analyzers\" />\r\n
        \       <dependency id=\"NuGet.ProjectModel\" version=\"5.3.1\" exclude=\"Build,Analyzers\"
        />\r\n      </group>\r\n      <group targetFramework=\".NETCoreApp2.1\">\r\n
        \       <dependency id=\"Microsoft.Build\" version=\"16.3.0\" exclude=\"Runtime,Build,Analyzers\"
        />\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"3.3.1\"
        exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NuGet.Packaging\"
        version=\"5.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NuGet.ProjectModel\"
        version=\"5.3.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n      <group
        targetFramework=\".NETCoreApp3.0\">\r\n        <dependency id=\"Microsoft.Build\"
        version=\"16.3.0\" exclude=\"Runtime,Build,Analyzers\" />\r\n        <dependency
        id=\"Microsoft.CodeAnalysis.CSharp\" version=\"3.3.1\" exclude=\"Build,Analyzers\"
        />\r\n        <dependency id=\"NuGet.Packaging\" version=\"5.3.1\" exclude=\"Build,Analyzers\"
        />\r\n        <dependency id=\"NuGet.ProjectModel\" version=\"5.3.1\" exclude=\"Build,Analyzers\"
        />\r\n      </group>\r\n      <group targetFramework=\".NETStandard2.0\">\r\n
        \       <dependency id=\"Microsoft.Build\" version=\"15.9.20\" exclude=\"Runtime,Build,Analyzers\"
        />\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"3.3.1\"
        exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NuGet.Packaging\"
        version=\"5.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NuGet.ProjectModel\"
        version=\"5.3.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n
        \ </metadata>\r\n</package>"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:42 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/Shouldly/3.0.2/Shouldly.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n
        \ <metadata>\r\n    <id>Shouldly</id>\r\n    <version>3.0.2</version>\r\n
        \   <authors>Shouldly</authors>\r\n    <owners>Shouldly</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n
        \   <licenseUrl>https://github.com/shouldly/shouldly/blob/master/LICENSE.txt</licenseUrl>\r\n
        \   <projectUrl>http://shouldly.github.com/</projectUrl>\r\n    <iconUrl>https://raw.githubusercontent.com/shouldly/shouldly/master/assets/logo_128x128.png</iconUrl>\r\n
        \   <description>Shouldly - Assertion framework for .NET. The way asserting
        *Should* be</description>\r\n    <tags>test unit testing TDD AAA should testunit
        rspec assert assertion framework</tags>\r\n    <repository type=\"git\" url=\"https://github.com/shouldly/shouldly.git\"
        commit=\"c4aa6f50f87084df92160f0335aeaf9e53b51bda\" />\r\n    <dependencies>\r\n
        \     <group targetFramework=\".NETFramework4.0\" />\r\n      <group targetFramework=\".NETFramework4.5.1\"
        />\r\n      <group targetFramework=\".NETStandard1.3\">\r\n        <dependency
        id=\"Microsoft.CSharp\" version=\"4.3.0\" exclude=\"Build,Analyzers\" />\r\n
        \       <dependency id=\"NETStandard.Library\" version=\"1.6.1\" exclude=\"Build,Analyzers\"
        />\r\n        <dependency id=\"System.Dynamic.Runtime\" version=\"4.3.0\"
        exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Reflection.TypeExtensions\"
        version=\"4.3.0\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n      <group
        targetFramework=\".NETStandard2.0\">\r\n        <dependency id=\"Microsoft.CSharp\"
        version=\"4.3.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Dynamic.Runtime\"
        version=\"4.3.0\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"System.Reflection.TypeExtensions\"
        version=\"4.3.0\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n
        \   <frameworkAssemblies>\r\n      <frameworkAssembly assemblyName=\"Microsoft.CSharp\"
        targetFramework=\".NETFramework4.0, .NETFramework4.5.1\" />\r\n      <frameworkAssembly
        assemblyName=\"System.Core\" targetFramework=\".NETFramework4.0\" />\r\n      <frameworkAssembly
        assemblyName=\"System\" targetFramework=\".NETFramework4.0, .NETFramework4.5.1\"
        />\r\n    </frameworkAssemblies>\r\n  </metadata>\r\n</package>"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:42 GMT
- request:
    method: get
    uri: https://github.com/shouldly/shouldly/blob/master/LICENSE.txt
    headers:
      Host:
      - github.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:43 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/xunit/2.4.1/xunit.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n
        \ <metadata minClientVersion=\"2.12\">\r\n    <id>xunit</id>\r\n    <version>2.4.1</version>\r\n
        \   <title>xUnit.net</title>\r\n    <authors>James Newkirk,Brad Wilson</authors>\r\n
        \   <owners>James Newkirk,Brad Wilson</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n
        \   <licenseUrl>https://raw.githubusercontent.com/xunit/xunit/master/license.txt</licenseUrl>\r\n
        \   <projectUrl>https://github.com/xunit/xunit</projectUrl>\r\n    <iconUrl>https://raw.githubusercontent.com/xunit/media/master/logo-512-transparent.png</iconUrl>\r\n
        \   <description>xUnit.net is a developer testing framework, built to support
        Test Driven Development, with a design goal of extreme simplicity and alignment
        with framework features.\r\n\r\nInstalling this package installs xunit.core,
        xunit.assert, and xunit.analyzers.</description>\r\n    <summary>xUnit.net
        is a developer testing framework, built to support Test Driven Development.</summary>\r\n
        \   <language>en-US</language>\r\n    <dependencies>\r\n      <dependency
        id=\"xunit.core\" version=\"[2.4.1]\" />\r\n      <dependency id=\"xunit.assert\"
        version=\"[2.4.1]\" />\r\n      <dependency id=\"xunit.analyzers\" version=\"0.10.0\"
        />\r\n    </dependencies>\r\n  </metadata>\r\n</package>"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:43 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/xunit/xunit/master/license.txt
    headers:
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: LICENSE
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:43 GMT
- request:
    method: get
    uri: https://api.nuget.org/v3-flatcontainer/xunit.runner.visualstudio/2.4.1/xunit.runner.visualstudio.nuspec
    headers:
      Host:
      - api.nuget.org
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n
        \ <metadata minClientVersion=\"2.12\">\r\n    <id>xunit.runner.visualstudio</id>\r\n
        \   <version>2.4.1</version>\r\n    <title>xUnit.net [Runner: Visual Studio]</title>\r\n
        \   <authors>James Newkirk, Brad Wilson</authors>\r\n    <owners>James Newkirk,
        Brad Wilson</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n
        \   <developmentDependency>true</developmentDependency>\r\n    <licenseUrl>https://raw.githubusercontent.com/xunit/xunit/master/license.txt</licenseUrl>\r\n
        \   <projectUrl>https://github.com/xunit/xunit</projectUrl>\r\n    <iconUrl>https://raw.githubusercontent.com/xunit/media/master/logo-512-transparent.png</iconUrl>\r\n
        \   <description>Visual Studio 2012+ Test Explorer runner for the xUnit.net
        framework. Capable of running xUnit.net v1.9.2 and v2.0+ tests. Supports .NET
        2.0 or later, .NET Core 1.0 or later, and Universal Windows 10.0 or later.</description>\r\n
        \   <language>en-US</language>\r\n    <dependencies>\r\n      <group targetFramework=\".NETCoreApp1.0\">\r\n
        \       <dependency id=\"Microsoft.NET.Test.Sdk\" version=\"15.0.0\" />\r\n
        \     </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>"
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:43 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/xunit/xunit/master/license.txt
    headers:
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    body:
      encoding: ASCII-8BIT
      string: LICENSE
    http_version: null
  recorded_at: Wed, 11 Mar 2020 23:33:44 GMT
recorded_with: VCR 5.1.0
